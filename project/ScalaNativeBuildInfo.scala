package scala.scalanative

import java.text.SimpleDateFormat
import java.time.*
import java.util.{Date, TimeZone}

import scala.sys.process.*
import scala.util.Properties.envOrNone

import org.eclipse.jgit.lib.{Constants, ObjectId, Ref, Repository}
import org.eclipse.jgit.revwalk.{RevCommit, RevWalk}
import org.eclipse.jgit.storage.file.FileRepositoryBuilder

// Hack warning: this class mimics the build-info file content generated by sbt plugin
// It is only used when bootstrapping the build, all other references to this file outside the sbt build
// are referencing outputs of the build-info plugin.
// It defines only values referenced and required to bootstrap build
object ScalaNativeBuildInfo {
  // The next version to be released
  private val baseVersion = "0.5.10"

  // Calculation of the version to use based on CI / env state
  val version = envOrNone("GITHUB_REF_TYPE") match {
    case Some("tag") =>
      // sanity check
      envOrNone("GITHUB_REF_NAME")
        .getOrElse(sys.error("Expected GitHub tag to be defined"))
        .ensuring(_ == s"v$baseVersion", "tag does not match expected version")
      baseVersion
    case _ if envOrNone("BACKPORT_RELEASE").isDefined =>
      baseVersion
    case _ if envOrNone("CI").isDefined =>
      s"$baseVersion-${GitInfo.commitDate}-${GitInfo.gitHash}-SNAPSHOT"
    case _ =>
      s"$baseVersion-SNAPSHOT"
  }

  // Copy of https://github.com/scala/scala3-lts/blob/97c2b63864d591c139531ad0260e4a202e8862b6/project/VersionUtil.scala
  object GitInfo {

    /** Seven letters of the SHA hash is considered enough to uniquely identify
     *  a commit, albeit extremely large projects - such as the Linux kernel -
     *  need more letters to stay unique
     */
    def gitHash: String = git.headCommitSha.substring(0, 7)
    def commitDate: String = {
      val format = new SimpleDateFormat("yyyyMMdd")
      format.setTimeZone(TimeZone.getTimeZone("UTC"))
      format.format(git.headCommitDate)
    }

    private class JGit(repo: Repository) {
      def headCommit: ObjectId =
        repo.exactRef(Constants.HEAD).getObjectId
      def headCommitSha: String = headCommit.name
      def headCommitDate: Date = {
        val walk = new RevWalk(repo)
        val commit = walk.parseCommit(headCommit)
        val seconds = commit.getCommitTime.toLong
        val millis = seconds * 1000L
        new Date(millis)
      }
    }

    private lazy val git = {
      val repo = new FileRepositoryBuilder()
        .setMustExist(true)
        .findGitDir()
        .build()
      new JGit(repo)
    }
  }
}
