--- 2.13.6/scala/reflect/Manifest.scala
+++ overrides-2.13/scala/reflect/Manifest.scala
@@ -82,22 +82,22 @@
   def valueManifests: List[AnyValManifest[_]] =
     ManifestFactory.valueManifests
 
-  val Byte: ManifestFactory.ByteManifest = ManifestFactory.Byte
-  val Short: ManifestFactory.ShortManifest = ManifestFactory.Short
-  val Char: ManifestFactory.CharManifest = ManifestFactory.Char
-  val Int: ManifestFactory.IntManifest = ManifestFactory.Int
-  val Long: ManifestFactory.LongManifest = ManifestFactory.Long
-  val Float: ManifestFactory.FloatManifest = ManifestFactory.Float
-  val Double: ManifestFactory.DoubleManifest = ManifestFactory.Double
-  val Boolean: ManifestFactory.BooleanManifest = ManifestFactory.Boolean
-  val Unit: ManifestFactory.UnitManifest = ManifestFactory.Unit
+  @inline def Byte: ManifestFactory.ByteManifest = ManifestFactory.Byte
+  @inline def Short: ManifestFactory.ShortManifest = ManifestFactory.Short
+  @inline def Char: ManifestFactory.CharManifest = ManifestFactory.Char
+  @inline def Int: ManifestFactory.IntManifest = ManifestFactory.Int
+  @inline def Long: ManifestFactory.LongManifest = ManifestFactory.Long
+  @inline def Float: ManifestFactory.FloatManifest = ManifestFactory.Float
+  @inline def Double: ManifestFactory.DoubleManifest = ManifestFactory.Double
+  @inline def Boolean: ManifestFactory.BooleanManifest = ManifestFactory.Boolean
+  @inline def Unit: ManifestFactory.UnitManifest = ManifestFactory.Unit
 
-  val Any: Manifest[scala.Any] = ManifestFactory.Any
-  val Object: Manifest[java.lang.Object] = ManifestFactory.Object
-  val AnyRef: Manifest[scala.AnyRef] = ManifestFactory.AnyRef
-  val AnyVal: Manifest[scala.AnyVal] = ManifestFactory.AnyVal
-  val Null: Manifest[scala.Null] = ManifestFactory.Null
-  val Nothing: Manifest[scala.Nothing] = ManifestFactory.Nothing
+  @inline def Any: Manifest[scala.Any] = ManifestFactory.Any
+  @inline def Object: Manifest[java.lang.Object] = ManifestFactory.Object
+  @inline def AnyRef: Manifest[scala.AnyRef] = ManifestFactory.AnyRef
+  @inline def AnyVal: Manifest[scala.AnyVal] = ManifestFactory.AnyVal
+  @inline def Null: Manifest[scala.Null] = ManifestFactory.Null
+  @inline def Nothing: Manifest[scala.Nothing] = ManifestFactory.Nothing
 
   /** Manifest for the singleton type `value.type`. */
   def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =
@@ -172,7 +172,7 @@
     List(Byte, Short, Char, Int, Long, Float, Double, Boolean, Unit)
 
   @SerialVersionUID(1L)
-  final private[reflect] class ByteManifest extends AnyValManifest[scala.Byte]("Byte") {
+  private[reflect] class ByteManifest extends AnyValManifest[scala.Byte]("Byte") {
     def runtimeClass = java.lang.Byte.TYPE
     @inline override def newArray(len: Int): Array[Byte] = new Array[Byte](len)
     override def newWrappedArray(len: Int): ArraySeq[Byte] = new ArraySeq.ofByte(new Array[Byte](len))
@@ -185,10 +185,11 @@
     }
     private def readResolve(): Any = Manifest.Byte
   }
-  val Byte: ByteManifest = new ByteManifest
+  private object ByteManifest extends ByteManifest
+  def Byte: ByteManifest = ByteManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class ShortManifest extends AnyValManifest[scala.Short]("Short") {
+  private[reflect] class ShortManifest extends AnyValManifest[scala.Short]("Short") {
     def runtimeClass = java.lang.Short.TYPE
     @inline override def newArray(len: Int): Array[Short] = new Array[Short](len)
     override def newWrappedArray(len: Int): ArraySeq[Short] = new ArraySeq.ofShort(new Array[Short](len))
@@ -201,10 +202,11 @@
     }
     private def readResolve(): Any = Manifest.Short
   }
-  val Short: ShortManifest = new ShortManifest
+  private object ShortManifest extends ShortManifest
+  def Short: ShortManifest = ShortManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class CharManifest extends AnyValManifest[scala.Char]("Char") {
+  private[reflect] class CharManifest extends AnyValManifest[scala.Char]("Char") {
     def runtimeClass = java.lang.Character.TYPE
     @inline override def newArray(len: Int): Array[Char] = new Array[Char](len)
     override def newWrappedArray(len: Int): ArraySeq[Char] = new ArraySeq.ofChar(new Array[Char](len))
@@ -217,10 +219,11 @@
     }
     private def readResolve(): Any = Manifest.Char
   }
-  val Char: CharManifest = new CharManifest
+  private object CharManifest extends CharManifest
+  def Char: CharManifest = CharManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class IntManifest extends AnyValManifest[scala.Int]("Int") {
+  private[reflect] class IntManifest extends AnyValManifest[scala.Int]("Int") {
     def runtimeClass = java.lang.Integer.TYPE
     @inline override def newArray(len: Int): Array[Int] = new Array[Int](len)
     override def newWrappedArray(len: Int): ArraySeq[Int] = new ArraySeq.ofInt(new Array[Int](len))
@@ -233,10 +236,11 @@
     }
     private def readResolve(): Any = Manifest.Int
   }
-  val Int: IntManifest = new IntManifest
+  private object IntManifest extends IntManifest
+  def Int: IntManifest = IntManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class LongManifest extends AnyValManifest[scala.Long]("Long") {
+  private[reflect] class LongManifest extends AnyValManifest[scala.Long]("Long") {
     def runtimeClass = java.lang.Long.TYPE
     @inline override def newArray(len: Int): Array[Long] = new Array[Long](len)
     override def newWrappedArray(len: Int): ArraySeq[Long] = new ArraySeq.ofLong(new Array[Long](len))
@@ -249,10 +253,11 @@
     }
     private def readResolve(): Any = Manifest.Long
   }
-  val Long: LongManifest = new LongManifest
+  private object LongManifest extends LongManifest
+  def Long: LongManifest = LongManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class FloatManifest extends AnyValManifest[scala.Float]("Float") {
+  private[reflect] class FloatManifest extends AnyValManifest[scala.Float]("Float") {
     def runtimeClass = java.lang.Float.TYPE
     @inline override def newArray(len: Int): Array[Float] = new Array[Float](len)
     override def newWrappedArray(len: Int): ArraySeq[Float] = new ArraySeq.ofFloat(new Array[Float](len))
@@ -265,10 +270,11 @@
     }
     private def readResolve(): Any = Manifest.Float
   }
-  val Float: FloatManifest = new FloatManifest
+  private object FloatManifest extends FloatManifest
+  def Float: FloatManifest = FloatManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class DoubleManifest extends AnyValManifest[scala.Double]("Double") {
+  private[reflect] class DoubleManifest extends AnyValManifest[scala.Double]("Double") {
     def runtimeClass = java.lang.Double.TYPE
     @inline override def newArray(len: Int): Array[Double] = new Array[Double](len)
     override def newWrappedArray(len: Int): ArraySeq[Double] = new ArraySeq.ofDouble(new Array[Double](len))
@@ -282,10 +288,11 @@
     }
     private def readResolve(): Any = Manifest.Double
   }
-  val Double: DoubleManifest = new DoubleManifest
+  private object DoubleManifest extends DoubleManifest
+  def Double: DoubleManifest = DoubleManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class BooleanManifest extends AnyValManifest[scala.Boolean]("Boolean") {
+  private[reflect] class BooleanManifest extends AnyValManifest[scala.Boolean]("Boolean") {
     def runtimeClass = java.lang.Boolean.TYPE
     @inline override def newArray(len: Int): Array[Boolean] = new Array[Boolean](len)
     override def newWrappedArray(len: Int): ArraySeq[Boolean] = new ArraySeq.ofBoolean(new Array[Boolean](len))
@@ -298,10 +305,11 @@
     }
     private def readResolve(): Any = Manifest.Boolean
   }
-  val Boolean: BooleanManifest = new BooleanManifest
+  private object BooleanManifest extends BooleanManifest
+  def Boolean: BooleanManifest = BooleanManifest
 
   @SerialVersionUID(1L)
-  final private[reflect] class UnitManifest extends AnyValManifest[scala.Unit]("Unit") {
+  private[reflect] class UnitManifest extends AnyValManifest[scala.Unit]("Unit") {
     def runtimeClass = java.lang.Void.TYPE
     @inline override def newArray(len: Int): Array[Unit] = new Array[Unit](len)
     override def newWrappedArray(len: Int): ArraySeq[Unit] = new ArraySeq.ofUnit(new Array[Unit](len))
@@ -317,57 +325,54 @@
     }
     private def readResolve(): Any = Manifest.Unit
   }
-  val Unit: UnitManifest = new UnitManifest
+  private object UnitManifest extends UnitManifest
+  def Unit: UnitManifest = UnitManifest
 
-  private[this] val ObjectTYPE = classOf[java.lang.Object]
-  private[this] val NothingTYPE = classOf[scala.runtime.Nothing$]
-  private[this] val NullTYPE = classOf[scala.runtime.Null$]
-
-  @SerialVersionUID(1L)
-  final private class AnyManifest extends PhantomManifest[scala.Any](ObjectTYPE, "Any") {
+  private object AnyManifest extends PhantomManifest[scala.Any](classOf[java.lang.Object], "Any") {
+	override def runtimeClass = classOf[java.lang.Object]
     override def newArray(len: Int) = new Array[scala.Any](len)
     override def <:<(that: ClassManifest[_]): Boolean = (that eq this)
     private def readResolve(): Any = Manifest.Any
   }
-  val Any: Manifest[scala.Any] = new AnyManifest
+  def Any: Manifest[scala.Any] = AnyManifest
 
-  @SerialVersionUID(1L)
-  final private class ObjectManifest extends PhantomManifest[java.lang.Object](ObjectTYPE, "Object") {
+  private object ObjectManifest extends PhantomManifest[java.lang.Object](classOf[java.lang.Object], "Object") {
+	override def runtimeClass = classOf[java.lang.Object]
     override def newArray(len: Int) = new Array[java.lang.Object](len)
     override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)
     private def readResolve(): Any = Manifest.Object
   }
-  val Object: Manifest[java.lang.Object] = new ObjectManifest
+  def Object: Manifest[java.lang.Object] = ObjectManifest
 
-  val AnyRef: Manifest[scala.AnyRef] = Object.asInstanceOf[Manifest[scala.AnyRef]]
+  def AnyRef: Manifest[scala.AnyRef] = Object.asInstanceOf[Manifest[scala.AnyRef]]
 
-  @SerialVersionUID(1L)
-  final private class AnyValPhantomManifest extends PhantomManifest[scala.AnyVal](ObjectTYPE, "AnyVal") {
+  private object AnyValManifest extends PhantomManifest[scala.AnyVal](classOf[java.lang.Object], "AnyVal") {
+	override def runtimeClass = classOf[java.lang.Object]
     override def newArray(len: Int) = new Array[scala.AnyVal](len)
     override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)
     private def readResolve(): Any = Manifest.AnyVal
   }
-  val AnyVal: Manifest[scala.AnyVal] = new AnyValPhantomManifest
+  def AnyVal: Manifest[scala.AnyVal] = AnyValManifest
 
-  @SerialVersionUID(1L)
-  final private class NullManifest extends PhantomManifest[scala.Null](NullTYPE, "Null") {
+  private object NullManifest extends PhantomManifest[scala.Null](classOf[scala.runtime.Null$], "Null") {
+	override def runtimeClass = classOf[scala.runtime.Null$]
     override def newArray(len: Int) = new Array[scala.Null](len)
     override def <:<(that: ClassManifest[_]): Boolean =
       (that ne null) && (that ne Nothing) && !(that <:< AnyVal)
     private def readResolve(): Any = Manifest.Null
   }
-  val Null: Manifest[scala.Null] = new NullManifest
+  def Null: Manifest[scala.Null] = NullManifest
 
-  @SerialVersionUID(1L)
-  final private class NothingManifest extends PhantomManifest[scala.Nothing](NothingTYPE, "Nothing") {
+  private object NothingManifest extends PhantomManifest[scala.Nothing](classOf[scala.runtime.Nothing$], "Nothing") {
+	override def runtimeClass = classOf[scala.runtime.Nothing$]
     override def newArray(len: Int) = new Array[scala.Nothing](len)
     override def <:<(that: ClassManifest[_]): Boolean = (that ne null)
     private def readResolve(): Any = Manifest.Nothing
   }
-  val Nothing: Manifest[scala.Nothing] = new NothingManifest
+  def Nothing: Manifest[scala.Nothing] = NothingManifest
 
   @SerialVersionUID(1L)
-  final private class SingletonTypeManifest[T <: AnyRef](value: AnyRef) extends Manifest[T] {
+  private class SingletonTypeManifest[T <: AnyRef](value: AnyRef) extends Manifest[T] {
     lazy val runtimeClass = value.getClass
     override lazy val toString = value.toString + ".type"
   }
@@ -409,8 +414,9 @@
     * a top-level or static class. */
   @SerialVersionUID(1L)
   private class ClassTypeManifest[T](prefix: Option[Manifest[_]],
-                                     val runtimeClass: Predef.Class[_],
+	runtimeClass1: Predef.Class[_],
                                      override val typeArguments: List[Manifest[_]]) extends Manifest[T] {
+	def runtimeClass: Predef.Class[_] = runtimeClass1
     override def toString =
       (if (prefix.isEmpty) "" else prefix.get.toString+"#") +
       (if (runtimeClass.isArray) "Array" else runtimeClass.getName) +
