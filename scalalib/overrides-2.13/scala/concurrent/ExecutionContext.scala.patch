--- 2.13.6/scala/concurrent/ExecutionContext.scala
+++ overrides-2.13/scala/concurrent/ExecutionContext.scala
@@ -197,7 +197,7 @@
    *
    * @return the global [[ExecutionContext]]
    */
-  final lazy val global: ExecutionContextExecutor = impl.ExecutionContextImpl.fromExecutor(null: Executor)
+  final lazy val global: ExecutionContextExecutor = scala.scalanative.runtime.ExecutionContext.global
 
   /**
    * WARNING: Only ever execute logic which will quickly return control to the caller.
@@ -227,18 +227,8 @@
   /**
    * See [[ExecutionContext.global]].
    */
-  private[scala] lazy val opportunistic: ExecutionContextExecutor = new ExecutionContextExecutor with BatchingExecutor {
-    final override def submitForExecution(runnable: Runnable): Unit = global.execute(runnable)
+  private[scala] lazy val opportunistic: ExecutionContextExecutor = ExecutionContext.global
 
-    final override def execute(runnable: Runnable): Unit =
-      if ((!runnable.isInstanceOf[impl.Promise.Transformation[_,_]] || runnable.asInstanceOf[impl.Promise.Transformation[_,_]].benefitsFromBatching) && runnable.isInstanceOf[Batchable])
-        submitAsyncBatched(runnable)
-      else
-        submitForExecution(runnable)
-
-    override final def reportFailure(t: Throwable): Unit = global.reportFailure(t)
-  }
-
   object Implicits {
     /**
      * An accessor that can be used to import the global `ExecutionContext` into the implicit scope,
