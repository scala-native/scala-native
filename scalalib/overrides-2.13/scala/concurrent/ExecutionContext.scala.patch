--- 2.13.10/scala/concurrent/ExecutionContext.scala
+++ overrides-2.13/scala/concurrent/ExecutionContext.scala
@@ -15,6 +15,7 @@
 
 import java.util.concurrent.{ ExecutorService, Executor }
 import scala.annotation.implicitNotFound
+import scala.scalanative.meta.LinktimeInfo.isMultithreadingEnabled
 
 /**
  * An `ExecutionContext` can execute program logic asynchronously,
@@ -197,7 +198,12 @@
    *
    * @return the global [[ExecutionContext]]
    */
-  final lazy val global: ExecutionContextExecutor = impl.ExecutionContextImpl.fromExecutor(null: Executor)
+  final lazy val global: ExecutionContextExecutor = {
+    if(isMultithreadingEnabled)
+      impl.ExecutionContextImpl.fromExecutor(null: Executor)
+    else
+      scala.scalanative.runtime.ExecutionContext.singleThreaded
+  }
 
   /**
    * WARNING: Only ever execute logic which will quickly return control to the caller.
@@ -227,16 +233,21 @@
   /**
    * See [[ExecutionContext.global]].
    */
-  private[scala] lazy val opportunistic: ExecutionContextExecutor = new ExecutionContextExecutor with BatchingExecutor {
-    final override def submitForExecution(runnable: Runnable): Unit = global.execute(runnable)
+  private[scala] lazy val opportunistic: ExecutionContextExecutor = {
+    if(!isMultithreadingEnabled) ExecutionContext.global
+    else {
+      new ExecutionContextExecutor with BatchingExecutor {
+        final override def submitForExecution(runnable: Runnable): Unit = global.execute(runnable)
 
-    final override def execute(runnable: Runnable): Unit =
-      if ((!runnable.isInstanceOf[impl.Promise.Transformation[_,_]] || runnable.asInstanceOf[impl.Promise.Transformation[_,_]].benefitsFromBatching) && runnable.isInstanceOf[Batchable])
-        submitAsyncBatched(runnable)
-      else
-        submitForExecution(runnable)
+        final override def execute(runnable: Runnable): Unit =
+          if ((!runnable.isInstanceOf[impl.Promise.Transformation[_, _]] || runnable.asInstanceOf[impl.Promise.Transformation[_, _]].benefitsFromBatching) && runnable.isInstanceOf[Batchable])
+            submitAsyncBatched(runnable)
+          else
+            submitForExecution(runnable)
 
-    override final def reportFailure(t: Throwable): Unit = global.reportFailure(t)
+        override final def reportFailure(t: Throwable): Unit = global.reportFailure(t)
+      }
+    }
   }
 
   object Implicits {
