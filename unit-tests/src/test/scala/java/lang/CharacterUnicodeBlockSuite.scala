package java.lang

class CharacterUnicodeBlockSuite extends tests.Suite {
  // Tests adapted from Harmony
  // scalastyle:off line.size.limit
  test("Character.UnicodeBlock.of(Char)") {
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.of(0x0.toChar))
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.of(0x7f.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x80.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.of(0xff.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.of(0x100.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.of(0x17f.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.of(0x180.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.of(0x24f.toChar))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.of(0x250.toChar))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.of(0x2af.toChar))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.of(0x2b0.toChar))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.of(0x2ff.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.of(0x300.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.of(0x36f.toChar))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.of(0x370.toChar))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.of(0x3ff.toChar))
    assertEquals(Character.UnicodeBlock.CYRILLIC,
                 Character.UnicodeBlock.of(0x400.toChar))
    assertEquals(Character.UnicodeBlock.CYRILLIC,
                 Character.UnicodeBlock.of(0x4ff.toChar))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.of(0x500.toChar))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.of(0x52f.toChar))
    assertEquals(Character.UnicodeBlock.ARMENIAN,
                 Character.UnicodeBlock.of(0x530.toChar))
    assertEquals(Character.UnicodeBlock.ARMENIAN,
                 Character.UnicodeBlock.of(0x58f.toChar))
    assertEquals(Character.UnicodeBlock.HEBREW,
                 Character.UnicodeBlock.of(0x590.toChar))
    assertEquals(Character.UnicodeBlock.HEBREW,
                 Character.UnicodeBlock.of(0x5ff.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC,
                 Character.UnicodeBlock.of(0x600.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC,
                 Character.UnicodeBlock.of(0x6ff.toChar))
    assertEquals(Character.UnicodeBlock.SYRIAC,
                 Character.UnicodeBlock.of(0x700.toChar))
    assertEquals(Character.UnicodeBlock.SYRIAC,
                 Character.UnicodeBlock.of(0x74f.toChar))
    assertNull(Character.UnicodeBlock.of(0x750.toChar))
    assertNull(Character.UnicodeBlock.of(0x77f.toChar))
    assertEquals(Character.UnicodeBlock.THAANA,
                 Character.UnicodeBlock.of(0x780.toChar))
    assertEquals(Character.UnicodeBlock.THAANA,
                 Character.UnicodeBlock.of(0x7bf.toChar))
    assertNull(Character.UnicodeBlock.of(0x7c0.toChar))
    assertNull(Character.UnicodeBlock.of(0x8ff.toChar))
    assertEquals(Character.UnicodeBlock.DEVANAGARI,
                 Character.UnicodeBlock.of(0x900.toChar))
    assertEquals(Character.UnicodeBlock.DEVANAGARI,
                 Character.UnicodeBlock.of(0x97f.toChar))
    assertEquals(Character.UnicodeBlock.BENGALI,
                 Character.UnicodeBlock.of(0x980.toChar))
    assertEquals(Character.UnicodeBlock.BENGALI,
                 Character.UnicodeBlock.of(0x9ff.toChar))
    assertEquals(Character.UnicodeBlock.GURMUKHI,
                 Character.UnicodeBlock.of(0xa00.toChar))
    assertEquals(Character.UnicodeBlock.GURMUKHI,
                 Character.UnicodeBlock.of(0xa7f.toChar))
    assertEquals(Character.UnicodeBlock.GUJARATI,
                 Character.UnicodeBlock.of(0xa80.toChar))
    assertEquals(Character.UnicodeBlock.GUJARATI,
                 Character.UnicodeBlock.of(0xaff.toChar))
    assertEquals(Character.UnicodeBlock.ORIYA,
                 Character.UnicodeBlock.of(0xb00.toChar))
    assertEquals(Character.UnicodeBlock.ORIYA,
                 Character.UnicodeBlock.of(0xb7f.toChar))
    assertEquals(Character.UnicodeBlock.TAMIL,
                 Character.UnicodeBlock.of(0xb80.toChar))
    assertEquals(Character.UnicodeBlock.TAMIL,
                 Character.UnicodeBlock.of(0xbff.toChar))
    assertEquals(Character.UnicodeBlock.TELUGU,
                 Character.UnicodeBlock.of(0xc00.toChar))
    assertEquals(Character.UnicodeBlock.TELUGU,
                 Character.UnicodeBlock.of(0xc7f.toChar))
    assertEquals(Character.UnicodeBlock.KANNADA,
                 Character.UnicodeBlock.of(0xc80.toChar))
    assertEquals(Character.UnicodeBlock.KANNADA,
                 Character.UnicodeBlock.of(0xcff.toChar))
    assertEquals(Character.UnicodeBlock.MALAYALAM,
                 Character.UnicodeBlock.of(0xd00.toChar))
    assertEquals(Character.UnicodeBlock.MALAYALAM,
                 Character.UnicodeBlock.of(0xd7f.toChar))
    assertEquals(Character.UnicodeBlock.SINHALA,
                 Character.UnicodeBlock.of(0xd80.toChar))
    assertEquals(Character.UnicodeBlock.SINHALA,
                 Character.UnicodeBlock.of(0xdff.toChar))
    assertEquals(Character.UnicodeBlock.THAI,
                 Character.UnicodeBlock.of(0xe00.toChar))
    assertEquals(Character.UnicodeBlock.THAI,
                 Character.UnicodeBlock.of(0xe7f.toChar))
    assertEquals(Character.UnicodeBlock.LAO,
                 Character.UnicodeBlock.of(0xe80.toChar))
    assertEquals(Character.UnicodeBlock.LAO,
                 Character.UnicodeBlock.of(0xeff.toChar))
    assertEquals(Character.UnicodeBlock.TIBETAN,
                 Character.UnicodeBlock.of(0xf00.toChar))
    assertEquals(Character.UnicodeBlock.TIBETAN,
                 Character.UnicodeBlock.of(0xfff.toChar))
    assertEquals(Character.UnicodeBlock.MYANMAR,
                 Character.UnicodeBlock.of(0x1000.toChar))
    assertEquals(Character.UnicodeBlock.MYANMAR,
                 Character.UnicodeBlock.of(0x109f.toChar))
    assertEquals(Character.UnicodeBlock.GEORGIAN,
                 Character.UnicodeBlock.of(0x10a0.toChar))
    assertEquals(Character.UnicodeBlock.GEORGIAN,
                 Character.UnicodeBlock.of(0x10ff.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.of(0x1100.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.of(0x11ff.toChar))
    assertEquals(Character.UnicodeBlock.ETHIOPIC,
                 Character.UnicodeBlock.of(0x1200.toChar))
    assertEquals(Character.UnicodeBlock.ETHIOPIC,
                 Character.UnicodeBlock.of(0x137f.toChar))
    assertNull(Character.UnicodeBlock.of(0x1380.toChar))
    assertNull(Character.UnicodeBlock.of(0x139f.toChar))
    assertEquals(Character.UnicodeBlock.CHEROKEE,
                 Character.UnicodeBlock.of(0x13a0.toChar))
    assertEquals(Character.UnicodeBlock.CHEROKEE,
                 Character.UnicodeBlock.of(0x13ff.toChar))
    assertEquals(Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
                 Character.UnicodeBlock.of(0x1400.toChar))
    assertEquals(Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
                 Character.UnicodeBlock.of(0x167f.toChar))
    assertEquals(Character.UnicodeBlock.OGHAM,
                 Character.UnicodeBlock.of(0x1680.toChar))
    assertEquals(Character.UnicodeBlock.OGHAM,
                 Character.UnicodeBlock.of(0x169f.toChar))
    assertEquals(Character.UnicodeBlock.RUNIC,
                 Character.UnicodeBlock.of(0x16a0.toChar))
    assertEquals(Character.UnicodeBlock.RUNIC,
                 Character.UnicodeBlock.of(0x16ff.toChar))
    assertEquals(Character.UnicodeBlock.TAGALOG,
                 Character.UnicodeBlock.of(0x1700.toChar))
    assertEquals(Character.UnicodeBlock.TAGALOG,
                 Character.UnicodeBlock.of(0x171f.toChar))
    assertEquals(Character.UnicodeBlock.HANUNOO,
                 Character.UnicodeBlock.of(0x1720.toChar))
    assertEquals(Character.UnicodeBlock.HANUNOO,
                 Character.UnicodeBlock.of(0x173f.toChar))
    assertEquals(Character.UnicodeBlock.BUHID,
                 Character.UnicodeBlock.of(0x1740.toChar))
    assertEquals(Character.UnicodeBlock.BUHID,
                 Character.UnicodeBlock.of(0x175f.toChar))
    assertEquals(Character.UnicodeBlock.TAGBANWA,
                 Character.UnicodeBlock.of(0x1760.toChar))
    assertEquals(Character.UnicodeBlock.TAGBANWA,
                 Character.UnicodeBlock.of(0x177f.toChar))
    assertEquals(Character.UnicodeBlock.KHMER,
                 Character.UnicodeBlock.of(0x1780.toChar))
    assertEquals(Character.UnicodeBlock.KHMER,
                 Character.UnicodeBlock.of(0x17ff.toChar))
    assertEquals(Character.UnicodeBlock.MONGOLIAN,
                 Character.UnicodeBlock.of(0x1800.toChar))
    assertEquals(Character.UnicodeBlock.MONGOLIAN,
                 Character.UnicodeBlock.of(0x18af.toChar))
    assertNull(Character.UnicodeBlock.of(0x18b0.toChar))
    assertNull(Character.UnicodeBlock.of(0x18ff.toChar))
    assertEquals(Character.UnicodeBlock.LIMBU,
                 Character.UnicodeBlock.of(0x1900.toChar))
    assertEquals(Character.UnicodeBlock.LIMBU,
                 Character.UnicodeBlock.of(0x194f.toChar))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.of(0x1950.toChar))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.of(0x197f.toChar))
    assertNull(Character.UnicodeBlock.of(0x1980.toChar))
    assertNull(Character.UnicodeBlock.of(0x19df.toChar))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.of(0x19e0.toChar))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.of(0x19ff.toChar))
    assertNull(Character.UnicodeBlock.of(0x1a00.toChar))
    assertNull(Character.UnicodeBlock.of(0x1cff.toChar))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x1d00.toChar))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x1d7f.toChar))
    assertNull(Character.UnicodeBlock.of(0x1d80.toChar))
    assertNull(Character.UnicodeBlock.of(0x1dff.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.of(0x1e00.toChar))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.of(0x1eff.toChar))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.of(0x1f00.toChar))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.of(0x1fff.toChar))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.of(0x2000.toChar))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.of(0x206f.toChar))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.of(0x2070.toChar))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.of(0x209f.toChar))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.of(0x20a0.toChar))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.of(0x20cf.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.of(0x20d0.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.of(0x20ff.toChar))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.of(0x2100.toChar))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.of(0x214f.toChar))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.of(0x2150.toChar))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.of(0x218f.toChar))
    assertEquals(Character.UnicodeBlock.ARROWS,
                 Character.UnicodeBlock.of(0x2190.toChar))
    assertEquals(Character.UnicodeBlock.ARROWS,
                 Character.UnicodeBlock.of(0x21ff.toChar))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2200.toChar))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x22ff.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.of(0x2300.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.of(0x23ff.toChar))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.of(0x2400.toChar))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.of(0x243f.toChar))
    assertEquals(Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
                 Character.UnicodeBlock.of(0x2440.toChar))
    assertEquals(Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
                 Character.UnicodeBlock.of(0x245f.toChar))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.of(0x2460.toChar))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.of(0x24ff.toChar))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.of(0x2500.toChar))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.of(0x257f.toChar))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.of(0x2580.toChar))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.of(0x259f.toChar))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.of(0x25a0.toChar))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.of(0x25ff.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.of(0x2600.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.of(0x26ff.toChar))
    assertEquals(Character.UnicodeBlock.DINGBATS,
                 Character.UnicodeBlock.of(0x2700.toChar))
    assertEquals(Character.UnicodeBlock.DINGBATS,
                 Character.UnicodeBlock.of(0x27bf.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
                 Character.UnicodeBlock.of(0x27c0.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
                 Character.UnicodeBlock.of(0x27ef.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.of(0x27f0.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.of(0x27ff.toChar))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.of(0x2800.toChar))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.of(0x28ff.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.of(0x2900.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.of(0x297f.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
                 Character.UnicodeBlock.of(0x2980.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
                 Character.UnicodeBlock.of(0x29ff.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2a00.toChar))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2aff.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
                 Character.UnicodeBlock.of(0x2b00.toChar))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
                 Character.UnicodeBlock.of(0x2bff.toChar))
    assertNull(Character.UnicodeBlock.of(0x2c00.toChar))
    assertNull(Character.UnicodeBlock.of(0x2e7f.toChar))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2e80.toChar))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2eff.toChar))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.of(0x2f00.toChar))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.of(0x2fdf.toChar))
    assertNull(Character.UnicodeBlock.of(0x2fe0.toChar))
    assertNull(Character.UnicodeBlock.of(0x2fef.toChar))
    assertEquals(Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
                 Character.UnicodeBlock.of(0x2ff0.toChar))
    assertEquals(Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
                 Character.UnicodeBlock.of(0x2fff.toChar))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.of(0x3000.toChar))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.of(0x303f.toChar))
    assertEquals(Character.UnicodeBlock.HIRAGANA,
                 Character.UnicodeBlock.of(0x3040.toChar))
    assertEquals(Character.UnicodeBlock.HIRAGANA,
                 Character.UnicodeBlock.of(0x309f.toChar))
    assertEquals(Character.UnicodeBlock.KATAKANA,
                 Character.UnicodeBlock.of(0x30a0.toChar))
    assertEquals(Character.UnicodeBlock.KATAKANA,
                 Character.UnicodeBlock.of(0x30ff.toChar))
    assertEquals(Character.UnicodeBlock.BOPOMOFO,
                 Character.UnicodeBlock.of(0x3100.toChar))
    assertEquals(Character.UnicodeBlock.BOPOMOFO,
                 Character.UnicodeBlock.of(0x312f.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.of(0x3130.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.of(0x318f.toChar))
    assertEquals(Character.UnicodeBlock.KANBUN,
                 Character.UnicodeBlock.of(0x3190.toChar))
    assertEquals(Character.UnicodeBlock.KANBUN,
                 Character.UnicodeBlock.of(0x319f.toChar))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.of(0x31a0.toChar))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.of(0x31bf.toChar))
    assertNull(Character.UnicodeBlock.of(0x31c0.toChar))
    assertNull(Character.UnicodeBlock.of(0x31ef.toChar))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x31f0.toChar))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x31ff.toChar))
    assertEquals(Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
                 Character.UnicodeBlock.of(0x3200.toChar))
    assertEquals(Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
                 Character.UnicodeBlock.of(0x32ff.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.of(0x3300.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.of(0x33ff.toChar))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
                 Character.UnicodeBlock.of(0x3400.toChar))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
                 Character.UnicodeBlock.of(0x4dbf.toChar))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.of(0x4dc0.toChar))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.of(0x4dff.toChar))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0x4e00.toChar))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0x9fff.toChar))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.of(0xa000.toChar))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.of(0xa48f.toChar))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.of(0xa490.toChar))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.of(0xa4cf.toChar))
    assertNull(Character.UnicodeBlock.of(0xa4d0.toChar))
    assertNull(Character.UnicodeBlock.of(0xabff.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.of(0xac00.toChar))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.of(0xd7af.toChar))
    assertNull(Character.UnicodeBlock.of(0xd7b0.toChar))
    assertNull(Character.UnicodeBlock.of(0xd7ff.toChar))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.of(0xd800.toChar))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.of(0xdb7f.toChar))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.of(0xdb80.toChar))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.of(0xdbff.toChar))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.of(0xdc00.toChar))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.of(0xdfff.toChar))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.of(0xe000.toChar))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.of(0xf8ff.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0xf900.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0xfaff.toChar))
    assertEquals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
                 Character.UnicodeBlock.of(0xfb00.toChar))
    assertEquals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
                 Character.UnicodeBlock.of(0xfb4f.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.of(0xfb50.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.of(0xfdff.toChar))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.of(0xfe00.toChar))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.of(0xfe0f.toChar))
    assertNull(Character.UnicodeBlock.of(0xfe10.toChar))
    assertNull(Character.UnicodeBlock.of(0xfe1f.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.of(0xfe20.toChar))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.of(0xfe2f.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.of(0xfe30.toChar))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.of(0xfe4f.toChar))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.of(0xfe50.toChar))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.of(0xfe6f.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.of(0xfe70.toChar))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.of(0xfeff.toChar))
    assertEquals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
                 Character.UnicodeBlock.of(0xff00.toChar))
    assertEquals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
                 Character.UnicodeBlock.of(0xffef.toChar))
    assertEquals(Character.UnicodeBlock.SPECIALS,
                 Character.UnicodeBlock.of(0xfff0.toChar))
    assertEquals(Character.UnicodeBlock.SPECIALS,
                 Character.UnicodeBlock.of(0xffff.toChar))
  }

  test("of(codepoint: Int)") {
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.of(0x0))
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.of(0x7f))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x80))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.of(0xff))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.of(0x100))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.of(0x17f))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.of(0x180))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.of(0x24f))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.of(0x250))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.of(0x2af))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.of(0x2b0))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.of(0x2ff))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.of(0x300))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.of(0x36f))
    assertEquals(Character.UnicodeBlock.GREEK, Character.UnicodeBlock.of(0x370))
    assertEquals(Character.UnicodeBlock.GREEK, Character.UnicodeBlock.of(0x3ff))
    assertEquals(Character.UnicodeBlock.CYRILLIC,
                 Character.UnicodeBlock.of(0x400))
    assertEquals(Character.UnicodeBlock.CYRILLIC,
                 Character.UnicodeBlock.of(0x4ff))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.of(0x500))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.of(0x52f))
    assertEquals(Character.UnicodeBlock.ARMENIAN,
                 Character.UnicodeBlock.of(0x530))
    assertEquals(Character.UnicodeBlock.ARMENIAN,
                 Character.UnicodeBlock.of(0x58f))
    assertEquals(Character.UnicodeBlock.HEBREW,
                 Character.UnicodeBlock.of(0x590))
    assertEquals(Character.UnicodeBlock.HEBREW,
                 Character.UnicodeBlock.of(0x5ff))
    assertEquals(Character.UnicodeBlock.ARABIC,
                 Character.UnicodeBlock.of(0x600))
    assertEquals(Character.UnicodeBlock.ARABIC,
                 Character.UnicodeBlock.of(0x6ff))
    assertEquals(Character.UnicodeBlock.SYRIAC,
                 Character.UnicodeBlock.of(0x700))
    assertEquals(Character.UnicodeBlock.SYRIAC,
                 Character.UnicodeBlock.of(0x74f))
    assertNull(Character.UnicodeBlock.of(0x750))
    assertNull(Character.UnicodeBlock.of(0x77f))
    assertEquals(Character.UnicodeBlock.THAANA,
                 Character.UnicodeBlock.of(0x780))
    assertEquals(Character.UnicodeBlock.THAANA,
                 Character.UnicodeBlock.of(0x7bf))
    assertNull(Character.UnicodeBlock.of(0x7c0))
    assertNull(Character.UnicodeBlock.of(0x8ff))
    assertEquals(Character.UnicodeBlock.DEVANAGARI,
                 Character.UnicodeBlock.of(0x900))
    assertEquals(Character.UnicodeBlock.DEVANAGARI,
                 Character.UnicodeBlock.of(0x97f))
    assertEquals(Character.UnicodeBlock.BENGALI,
                 Character.UnicodeBlock.of(0x980))
    assertEquals(Character.UnicodeBlock.BENGALI,
                 Character.UnicodeBlock.of(0x9ff))
    assertEquals(Character.UnicodeBlock.GURMUKHI,
                 Character.UnicodeBlock.of(0xa00))
    assertEquals(Character.UnicodeBlock.GURMUKHI,
                 Character.UnicodeBlock.of(0xa7f))
    assertEquals(Character.UnicodeBlock.GUJARATI,
                 Character.UnicodeBlock.of(0xa80))
    assertEquals(Character.UnicodeBlock.GUJARATI,
                 Character.UnicodeBlock.of(0xaff))
    assertEquals(Character.UnicodeBlock.ORIYA, Character.UnicodeBlock.of(0xb00))
    assertEquals(Character.UnicodeBlock.ORIYA, Character.UnicodeBlock.of(0xb7f))
    assertEquals(Character.UnicodeBlock.TAMIL, Character.UnicodeBlock.of(0xb80))
    assertEquals(Character.UnicodeBlock.TAMIL, Character.UnicodeBlock.of(0xbff))
    assertEquals(Character.UnicodeBlock.TELUGU,
                 Character.UnicodeBlock.of(0xc00))
    assertEquals(Character.UnicodeBlock.TELUGU,
                 Character.UnicodeBlock.of(0xc7f))
    assertEquals(Character.UnicodeBlock.KANNADA,
                 Character.UnicodeBlock.of(0xc80))
    assertEquals(Character.UnicodeBlock.KANNADA,
                 Character.UnicodeBlock.of(0xcff))
    assertEquals(Character.UnicodeBlock.MALAYALAM,
                 Character.UnicodeBlock.of(0xd00))
    assertEquals(Character.UnicodeBlock.MALAYALAM,
                 Character.UnicodeBlock.of(0xd7f))
    assertEquals(Character.UnicodeBlock.SINHALA,
                 Character.UnicodeBlock.of(0xd80))
    assertEquals(Character.UnicodeBlock.SINHALA,
                 Character.UnicodeBlock.of(0xdff))
    assertEquals(Character.UnicodeBlock.THAI, Character.UnicodeBlock.of(0xe00))
    assertEquals(Character.UnicodeBlock.THAI, Character.UnicodeBlock.of(0xe7f))
    assertEquals(Character.UnicodeBlock.LAO, Character.UnicodeBlock.of(0xe80))
    assertEquals(Character.UnicodeBlock.LAO, Character.UnicodeBlock.of(0xeff))
    assertEquals(Character.UnicodeBlock.TIBETAN,
                 Character.UnicodeBlock.of(0xf00))
    assertEquals(Character.UnicodeBlock.TIBETAN,
                 Character.UnicodeBlock.of(0xfff))
    assertEquals(Character.UnicodeBlock.MYANMAR,
                 Character.UnicodeBlock.of(0x1000))
    assertEquals(Character.UnicodeBlock.MYANMAR,
                 Character.UnicodeBlock.of(0x109f))
    assertEquals(Character.UnicodeBlock.GEORGIAN,
                 Character.UnicodeBlock.of(0x10a0))
    assertEquals(Character.UnicodeBlock.GEORGIAN,
                 Character.UnicodeBlock.of(0x10ff))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.of(0x1100))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.of(0x11ff))
    assertEquals(Character.UnicodeBlock.ETHIOPIC,
                 Character.UnicodeBlock.of(0x1200))
    assertEquals(Character.UnicodeBlock.ETHIOPIC,
                 Character.UnicodeBlock.of(0x137f))
    assertNull(Character.UnicodeBlock.of(0x1380))
    assertNull(Character.UnicodeBlock.of(0x139f))
    assertEquals(Character.UnicodeBlock.CHEROKEE,
                 Character.UnicodeBlock.of(0x13a0))
    assertEquals(Character.UnicodeBlock.CHEROKEE,
                 Character.UnicodeBlock.of(0x13ff))
    assertEquals(Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
                 Character.UnicodeBlock.of(0x1400))
    assertEquals(Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
                 Character.UnicodeBlock.of(0x167f))
    assertEquals(Character.UnicodeBlock.OGHAM,
                 Character.UnicodeBlock.of(0x1680))
    assertEquals(Character.UnicodeBlock.OGHAM,
                 Character.UnicodeBlock.of(0x169f))
    assertEquals(Character.UnicodeBlock.RUNIC,
                 Character.UnicodeBlock.of(0x16a0))
    assertEquals(Character.UnicodeBlock.RUNIC,
                 Character.UnicodeBlock.of(0x16ff))
    assertEquals(Character.UnicodeBlock.TAGALOG,
                 Character.UnicodeBlock.of(0x1700))
    assertEquals(Character.UnicodeBlock.TAGALOG,
                 Character.UnicodeBlock.of(0x171f))
    assertEquals(Character.UnicodeBlock.HANUNOO,
                 Character.UnicodeBlock.of(0x1720))
    assertEquals(Character.UnicodeBlock.HANUNOO,
                 Character.UnicodeBlock.of(0x173f))
    assertEquals(Character.UnicodeBlock.BUHID,
                 Character.UnicodeBlock.of(0x1740))
    assertEquals(Character.UnicodeBlock.BUHID,
                 Character.UnicodeBlock.of(0x175f))
    assertEquals(Character.UnicodeBlock.TAGBANWA,
                 Character.UnicodeBlock.of(0x1760))
    assertEquals(Character.UnicodeBlock.TAGBANWA,
                 Character.UnicodeBlock.of(0x177f))
    assertEquals(Character.UnicodeBlock.KHMER,
                 Character.UnicodeBlock.of(0x1780))
    assertEquals(Character.UnicodeBlock.KHMER,
                 Character.UnicodeBlock.of(0x17ff))
    assertEquals(Character.UnicodeBlock.MONGOLIAN,
                 Character.UnicodeBlock.of(0x1800))
    assertEquals(Character.UnicodeBlock.MONGOLIAN,
                 Character.UnicodeBlock.of(0x18af))
    assertNull(Character.UnicodeBlock.of(0x18b0))
    assertNull(Character.UnicodeBlock.of(0x18ff))
    assertEquals(Character.UnicodeBlock.LIMBU,
                 Character.UnicodeBlock.of(0x1900))
    assertEquals(Character.UnicodeBlock.LIMBU,
                 Character.UnicodeBlock.of(0x194f))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.of(0x1950))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.of(0x197f))
    assertNull(Character.UnicodeBlock.of(0x1980))
    assertNull(Character.UnicodeBlock.of(0x19df))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.of(0x19e0))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.of(0x19ff))
    assertNull(Character.UnicodeBlock.of(0x1a00))
    assertNull(Character.UnicodeBlock.of(0x1cff))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x1d00))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x1d7f))
    assertNull(Character.UnicodeBlock.of(0x1d80))
    assertNull(Character.UnicodeBlock.of(0x1dff))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.of(0x1e00))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.of(0x1eff))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.of(0x1f00))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.of(0x1fff))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.of(0x2000))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.of(0x206f))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.of(0x2070))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.of(0x209f))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.of(0x20a0))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.of(0x20cf))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.of(0x20d0))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.of(0x20ff))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.of(0x2100))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.of(0x214f))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.of(0x2150))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.of(0x218f))
    assertEquals(Character.UnicodeBlock.ARROWS,
                 Character.UnicodeBlock.of(0x2190))
    assertEquals(Character.UnicodeBlock.ARROWS,
                 Character.UnicodeBlock.of(0x21ff))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2200))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x22ff))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.of(0x2300))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.of(0x23ff))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.of(0x2400))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.of(0x243f))
    assertEquals(Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
                 Character.UnicodeBlock.of(0x2440))
    assertEquals(Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
                 Character.UnicodeBlock.of(0x245f))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.of(0x2460))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.of(0x24ff))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.of(0x2500))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.of(0x257f))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.of(0x2580))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.of(0x259f))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.of(0x25a0))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.of(0x25ff))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.of(0x2600))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.of(0x26ff))
    assertEquals(Character.UnicodeBlock.DINGBATS,
                 Character.UnicodeBlock.of(0x2700))
    assertEquals(Character.UnicodeBlock.DINGBATS,
                 Character.UnicodeBlock.of(0x27bf))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
                 Character.UnicodeBlock.of(0x27c0))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
                 Character.UnicodeBlock.of(0x27ef))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.of(0x27f0))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.of(0x27ff))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.of(0x2800))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.of(0x28ff))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.of(0x2900))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.of(0x297f))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
                 Character.UnicodeBlock.of(0x2980))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
                 Character.UnicodeBlock.of(0x29ff))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2a00))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.of(0x2aff))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
                 Character.UnicodeBlock.of(0x2b00))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
                 Character.UnicodeBlock.of(0x2bff))
    assertNull(Character.UnicodeBlock.of(0x2c00))
    assertNull(Character.UnicodeBlock.of(0x2e7f))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2e80))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2eff))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.of(0x2f00))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.of(0x2fdf))
    assertNull(Character.UnicodeBlock.of(0x2fe0))
    assertNull(Character.UnicodeBlock.of(0x2fef))
    assertEquals(Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
                 Character.UnicodeBlock.of(0x2ff0))
    assertEquals(Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
                 Character.UnicodeBlock.of(0x2fff))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.of(0x3000))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.of(0x303f))
    assertEquals(Character.UnicodeBlock.HIRAGANA,
                 Character.UnicodeBlock.of(0x3040))
    assertEquals(Character.UnicodeBlock.HIRAGANA,
                 Character.UnicodeBlock.of(0x309f))
    assertEquals(Character.UnicodeBlock.KATAKANA,
                 Character.UnicodeBlock.of(0x30a0))
    assertEquals(Character.UnicodeBlock.KATAKANA,
                 Character.UnicodeBlock.of(0x30ff))
    assertEquals(Character.UnicodeBlock.BOPOMOFO,
                 Character.UnicodeBlock.of(0x3100))
    assertEquals(Character.UnicodeBlock.BOPOMOFO,
                 Character.UnicodeBlock.of(0x312f))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.of(0x3130))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.of(0x318f))
    assertEquals(Character.UnicodeBlock.KANBUN,
                 Character.UnicodeBlock.of(0x3190))
    assertEquals(Character.UnicodeBlock.KANBUN,
                 Character.UnicodeBlock.of(0x319f))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.of(0x31a0))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.of(0x31bf))
    assertNull(Character.UnicodeBlock.of(0x31c0))
    assertNull(Character.UnicodeBlock.of(0x31ef))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x31f0))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.of(0x31ff))
    assertEquals(Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
                 Character.UnicodeBlock.of(0x3200))
    assertEquals(Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
                 Character.UnicodeBlock.of(0x32ff))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.of(0x3300))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.of(0x33ff))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
                 Character.UnicodeBlock.of(0x3400))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
                 Character.UnicodeBlock.of(0x4dbf))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.of(0x4dc0))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.of(0x4dff))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0x4e00))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0x9fff))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.of(0xa000))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.of(0xa48f))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.of(0xa490))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.of(0xa4cf))
    assertNull(Character.UnicodeBlock.of(0xa4d0))
    assertNull(Character.UnicodeBlock.of(0xabff))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.of(0xac00))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.of(0xd7af))
    assertNull(Character.UnicodeBlock.of(0xd7b0))
    assertNull(Character.UnicodeBlock.of(0xd7ff))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.of(0xd800))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.of(0xdb7f))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.of(0xdb80))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.of(0xdbff))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.of(0xdc00))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.of(0xdfff))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.of(0xe000))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.of(0xf8ff))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0xf900))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.of(0xfaff))
    assertEquals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
                 Character.UnicodeBlock.of(0xfb00))
    assertEquals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
                 Character.UnicodeBlock.of(0xfb4f))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.of(0xfb50))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.of(0xfdff))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.of(0xfe00))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.of(0xfe0f))
    assertNull(Character.UnicodeBlock.of(0xfe10))
    assertNull(Character.UnicodeBlock.of(0xfe1f))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.of(0xfe20))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.of(0xfe2f))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.of(0xfe30))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.of(0xfe4f))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.of(0xfe50))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.of(0xfe6f))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.of(0xfe70))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.of(0xfeff))
    assertEquals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
                 Character.UnicodeBlock.of(0xff00))
    assertEquals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
                 Character.UnicodeBlock.of(0xffef))
    assertEquals(Character.UnicodeBlock.SPECIALS,
                 Character.UnicodeBlock.of(0xfff0))
    assertEquals(Character.UnicodeBlock.SPECIALS,
                 Character.UnicodeBlock.of(0xffff))
    assertEquals(Character.UnicodeBlock.LINEAR_B_SYLLABARY,
                 Character.UnicodeBlock.of(0x10000))
    assertEquals(Character.UnicodeBlock.LINEAR_B_SYLLABARY,
                 Character.UnicodeBlock.of(0x1007f))
    assertEquals(Character.UnicodeBlock.LINEAR_B_IDEOGRAMS,
                 Character.UnicodeBlock.of(0x10080))
    assertEquals(Character.UnicodeBlock.LINEAR_B_IDEOGRAMS,
                 Character.UnicodeBlock.of(0x100ff))
    assertEquals(Character.UnicodeBlock.AEGEAN_NUMBERS,
                 Character.UnicodeBlock.of(0x10100))
    assertEquals(Character.UnicodeBlock.AEGEAN_NUMBERS,
                 Character.UnicodeBlock.of(0x1013f))
    assertNull(Character.UnicodeBlock.of(0x10140))
    assertNull(Character.UnicodeBlock.of(0x102ff))
    assertEquals(Character.UnicodeBlock.OLD_ITALIC,
                 Character.UnicodeBlock.of(0x10300))
    assertEquals(Character.UnicodeBlock.OLD_ITALIC,
                 Character.UnicodeBlock.of(0x1032f))
    assertEquals(Character.UnicodeBlock.GOTHIC,
                 Character.UnicodeBlock.of(0x10330))
    assertEquals(Character.UnicodeBlock.GOTHIC,
                 Character.UnicodeBlock.of(0x1034f))
    assertNull(Character.UnicodeBlock.of(0x10350))
    assertNull(Character.UnicodeBlock.of(0x1037f))
    assertEquals(Character.UnicodeBlock.UGARITIC,
                 Character.UnicodeBlock.of(0x10380))
    assertEquals(Character.UnicodeBlock.UGARITIC,
                 Character.UnicodeBlock.of(0x1039f))
    assertNull(Character.UnicodeBlock.of(0x103a0))
    assertNull(Character.UnicodeBlock.of(0x103ff))
    assertEquals(Character.UnicodeBlock.DESERET,
                 Character.UnicodeBlock.of(0x10400))
    assertEquals(Character.UnicodeBlock.DESERET,
                 Character.UnicodeBlock.of(0x1044f))
    assertEquals(Character.UnicodeBlock.SHAVIAN,
                 Character.UnicodeBlock.of(0x10450))
    assertEquals(Character.UnicodeBlock.SHAVIAN,
                 Character.UnicodeBlock.of(0x1047f))
    assertEquals(Character.UnicodeBlock.OSMANYA,
                 Character.UnicodeBlock.of(0x10480))
    assertEquals(Character.UnicodeBlock.OSMANYA,
                 Character.UnicodeBlock.of(0x104af))
    assertNull(Character.UnicodeBlock.of(0x104b0))
    assertNull(Character.UnicodeBlock.of(0x107ff))
    assertEquals(Character.UnicodeBlock.CYPRIOT_SYLLABARY,
                 Character.UnicodeBlock.of(0x10800))
    assertEquals(Character.UnicodeBlock.CYPRIOT_SYLLABARY,
                 Character.UnicodeBlock.of(0x1083f))
    assertNull(Character.UnicodeBlock.of(0x10840))
    assertNull(Character.UnicodeBlock.of(0x1cfff))
    assertEquals(Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d000))
    assertEquals(Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d0ff))
    assertEquals(Character.UnicodeBlock.MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d100))
    assertEquals(Character.UnicodeBlock.MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d1ff))
    assertNull(Character.UnicodeBlock.of(0x1d200))
    assertNull(Character.UnicodeBlock.of(0x1d2ff))
    assertEquals(Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d300))
    assertEquals(Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d35f))
    assertNull(Character.UnicodeBlock.of(0x1d360))
    assertNull(Character.UnicodeBlock.of(0x1d3ff))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d400))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
                 Character.UnicodeBlock.of(0x1d7ff))
    assertNull(Character.UnicodeBlock.of(0x1d800))
    assertNull(Character.UnicodeBlock.of(0x1ffff))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
                 Character.UnicodeBlock.of(0x20000))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
                 Character.UnicodeBlock.of(0x2a6df))
    assertNull(Character.UnicodeBlock.of(0x2a6e0))
    assertNull(Character.UnicodeBlock.of(0x2f7ff))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2f800))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0x2fa1f))
    assertNull(Character.UnicodeBlock.of(0x2fa20))
    assertNull(Character.UnicodeBlock.of(0xdffff))
    assertEquals(Character.UnicodeBlock.TAGS,
                 Character.UnicodeBlock.of(0xe0000))
    assertEquals(Character.UnicodeBlock.TAGS,
                 Character.UnicodeBlock.of(0xe007f))
    assertNull(Character.UnicodeBlock.of(0xe0080))
    assertNull(Character.UnicodeBlock.of(0xe00ff))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0xe0100))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT,
                 Character.UnicodeBlock.of(0xe01ef))
    assertNull(Character.UnicodeBlock.of(0xe01f0))
    assertNull(Character.UnicodeBlock.of(0xeffff))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A,
                 Character.UnicodeBlock.of(0xf0000))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A,
                 Character.UnicodeBlock.of(0xfffff))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B,
                 Character.UnicodeBlock.of(0x100000))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B,
                 Character.UnicodeBlock.of(0x10ffff))
  }

  test("of should throw IllegalArgumentException") {
    expectThrows(classOf[IllegalArgumentException],
                 Character.UnicodeBlock.of(Character.MAX_CODE_POINT + 1))
  }

  test("forName(String)") {
    assertEquals(Character.UnicodeBlock.SURROGATES_AREA,
                 Character.UnicodeBlock.forName("SURROGATES_AREA"))
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.forName("BASIC_LATIN"))
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.forName("Basic Latin"))
    assertEquals(Character.UnicodeBlock.BASIC_LATIN,
                 Character.UnicodeBlock.forName("BasicLatin"))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.forName("LATIN_1_SUPPLEMENT"))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.forName("Latin-1 Supplement"))
    assertEquals(Character.UnicodeBlock.LATIN_1_SUPPLEMENT,
                 Character.UnicodeBlock.forName("Latin-1Supplement"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.forName("LATIN_EXTENDED_A"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.forName("Latin Extended-A"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_A,
                 Character.UnicodeBlock.forName("LatinExtended-A"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.forName("LATIN_EXTENDED_B"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.forName("Latin Extended-B"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_B,
                 Character.UnicodeBlock.forName("LatinExtended-B"))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.forName("IPA_EXTENSIONS"))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.forName("IPA Extensions"))
    assertEquals(Character.UnicodeBlock.IPA_EXTENSIONS,
                 Character.UnicodeBlock.forName("IPAExtensions"))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.forName("SPACING_MODIFIER_LETTERS"))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.forName("Spacing Modifier Letters"))
    assertEquals(Character.UnicodeBlock.SPACING_MODIFIER_LETTERS,
                 Character.UnicodeBlock.forName("SpacingModifierLetters"))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.forName("COMBINING_DIACRITICAL_MARKS"))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.forName("Combining Diacritical Marks"))
    assertEquals(Character.UnicodeBlock.COMBINING_DIACRITICAL_MARKS,
                 Character.UnicodeBlock.forName("CombiningDiacriticalMarks"))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.forName("GREEK"))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.forName("Greek and Coptic"))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.forName("GreekandCoptic"))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.forName("Greek"))
    assertEquals(Character.UnicodeBlock.GREEK,
                 Character.UnicodeBlock.forName("Greek"))
    assertEquals(Character.UnicodeBlock.CYRILLIC,
                 Character.UnicodeBlock.forName("CYRILLIC"))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.forName("CYRILLIC_SUPPLEMENTARY"))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.forName("Cyrillic Supplementary"))
    assertEquals(Character.UnicodeBlock.CYRILLIC_SUPPLEMENTARY,
                 Character.UnicodeBlock.forName("CyrillicSupplementary"))
    assertEquals(Character.UnicodeBlock.ARMENIAN,
                 Character.UnicodeBlock.forName("ARMENIAN"))
    assertEquals(Character.UnicodeBlock.HEBREW,
                 Character.UnicodeBlock.forName("HEBREW"))
    assertEquals(Character.UnicodeBlock.ARABIC,
                 Character.UnicodeBlock.forName("ARABIC"))
    assertEquals(Character.UnicodeBlock.SYRIAC,
                 Character.UnicodeBlock.forName("SYRIAC"))
    assertEquals(Character.UnicodeBlock.THAANA,
                 Character.UnicodeBlock.forName("THAANA"))
    assertEquals(Character.UnicodeBlock.DEVANAGARI,
                 Character.UnicodeBlock.forName("DEVANAGARI"))
    assertEquals(Character.UnicodeBlock.BENGALI,
                 Character.UnicodeBlock.forName("BENGALI"))
    assertEquals(Character.UnicodeBlock.GURMUKHI,
                 Character.UnicodeBlock.forName("GURMUKHI"))
    assertEquals(Character.UnicodeBlock.GUJARATI,
                 Character.UnicodeBlock.forName("GUJARATI"))
    assertEquals(Character.UnicodeBlock.ORIYA,
                 Character.UnicodeBlock.forName("ORIYA"))
    assertEquals(Character.UnicodeBlock.TAMIL,
                 Character.UnicodeBlock.forName("TAMIL"))
    assertEquals(Character.UnicodeBlock.TELUGU,
                 Character.UnicodeBlock.forName("TELUGU"))
    assertEquals(Character.UnicodeBlock.KANNADA,
                 Character.UnicodeBlock.forName("KANNADA"))
    assertEquals(Character.UnicodeBlock.MALAYALAM,
                 Character.UnicodeBlock.forName("MALAYALAM"))
    assertEquals(Character.UnicodeBlock.SINHALA,
                 Character.UnicodeBlock.forName("SINHALA"))
    assertEquals(Character.UnicodeBlock.THAI,
                 Character.UnicodeBlock.forName("THAI"))
    assertEquals(Character.UnicodeBlock.LAO,
                 Character.UnicodeBlock.forName("LAO"))
    assertEquals(Character.UnicodeBlock.TIBETAN,
                 Character.UnicodeBlock.forName("TIBETAN"))
    assertEquals(Character.UnicodeBlock.MYANMAR,
                 Character.UnicodeBlock.forName("MYANMAR"))
    assertEquals(Character.UnicodeBlock.GEORGIAN,
                 Character.UnicodeBlock.forName("GEORGIAN"))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.forName("HANGUL_JAMO"))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.forName("Hangul Jamo"))
    assertEquals(Character.UnicodeBlock.HANGUL_JAMO,
                 Character.UnicodeBlock.forName("HangulJamo"))
    assertEquals(Character.UnicodeBlock.ETHIOPIC,
                 Character.UnicodeBlock.forName("ETHIOPIC"))
    assertEquals(Character.UnicodeBlock.CHEROKEE,
                 Character.UnicodeBlock.forName("CHEROKEE"))
    assertEquals(
      Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
      Character.UnicodeBlock.forName("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"))
    assertEquals(
      Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
      Character.UnicodeBlock.forName("Unified Canadian Aboriginal Syllabics"))
    assertEquals(
      Character.UnicodeBlock.UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
      Character.UnicodeBlock.forName("UnifiedCanadianAboriginalSyllabics"))
    assertEquals(Character.UnicodeBlock.OGHAM,
                 Character.UnicodeBlock.forName("OGHAM"))
    assertEquals(Character.UnicodeBlock.RUNIC,
                 Character.UnicodeBlock.forName("RUNIC"))
    assertEquals(Character.UnicodeBlock.TAGALOG,
                 Character.UnicodeBlock.forName("TAGALOG"))
    assertEquals(Character.UnicodeBlock.HANUNOO,
                 Character.UnicodeBlock.forName("HANUNOO"))
    assertEquals(Character.UnicodeBlock.BUHID,
                 Character.UnicodeBlock.forName("BUHID"))
    assertEquals(Character.UnicodeBlock.TAGBANWA,
                 Character.UnicodeBlock.forName("TAGBANWA"))
    assertEquals(Character.UnicodeBlock.KHMER,
                 Character.UnicodeBlock.forName("KHMER"))
    assertEquals(Character.UnicodeBlock.MONGOLIAN,
                 Character.UnicodeBlock.forName("MONGOLIAN"))
    assertEquals(Character.UnicodeBlock.LIMBU,
                 Character.UnicodeBlock.forName("LIMBU"))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.forName("TAI_LE"))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.forName("Tai Le"))
    assertEquals(Character.UnicodeBlock.TAI_LE,
                 Character.UnicodeBlock.forName("TaiLe"))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.forName("KHMER_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.forName("Khmer Symbols"))
    assertEquals(Character.UnicodeBlock.KHMER_SYMBOLS,
                 Character.UnicodeBlock.forName("KhmerSymbols"))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("PHONETIC_EXTENSIONS"))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("Phonetic Extensions"))
    assertEquals(Character.UnicodeBlock.PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("PhoneticExtensions"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.forName("LATIN_EXTENDED_ADDITIONAL"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.forName("Latin Extended Additional"))
    assertEquals(Character.UnicodeBlock.LATIN_EXTENDED_ADDITIONAL,
                 Character.UnicodeBlock.forName("LatinExtendedAdditional"))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.forName("GREEK_EXTENDED"))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.forName("Greek Extended"))
    assertEquals(Character.UnicodeBlock.GREEK_EXTENDED,
                 Character.UnicodeBlock.forName("GreekExtended"))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.forName("GENERAL_PUNCTUATION"))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.forName("General Punctuation"))
    assertEquals(Character.UnicodeBlock.GENERAL_PUNCTUATION,
                 Character.UnicodeBlock.forName("GeneralPunctuation"))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.forName("SUPERSCRIPTS_AND_SUBSCRIPTS"))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.forName("Superscripts and Subscripts"))
    assertEquals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS,
                 Character.UnicodeBlock.forName("SuperscriptsandSubscripts"))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.forName("CURRENCY_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.forName("Currency Symbols"))
    assertEquals(Character.UnicodeBlock.CURRENCY_SYMBOLS,
                 Character.UnicodeBlock.forName("CurrencySymbols"))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.forName("COMBINING_MARKS_FOR_SYMBOLS"))
    assertEquals(
      Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
      Character.UnicodeBlock.forName("Combining Diacritical Marks for Symbols"))
    assertEquals(
      Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
      Character.UnicodeBlock.forName("CombiningDiacriticalMarksforSymbols"))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.forName("Combining Marks for Symbols"))
    assertEquals(Character.UnicodeBlock.COMBINING_MARKS_FOR_SYMBOLS,
                 Character.UnicodeBlock.forName("CombiningMarksforSymbols"))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.forName("LETTERLIKE_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.forName("Letterlike Symbols"))
    assertEquals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS,
                 Character.UnicodeBlock.forName("LetterlikeSymbols"))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.forName("NUMBER_FORMS"))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.forName("Number Forms"))
    assertEquals(Character.UnicodeBlock.NUMBER_FORMS,
                 Character.UnicodeBlock.forName("NumberForms"))
    assertEquals(Character.UnicodeBlock.ARROWS,
                 Character.UnicodeBlock.forName("ARROWS"))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.forName("MATHEMATICAL_OPERATORS"))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.forName("Mathematical Operators"))
    assertEquals(Character.UnicodeBlock.MATHEMATICAL_OPERATORS,
                 Character.UnicodeBlock.forName("MathematicalOperators"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.forName("MISCELLANEOUS_TECHNICAL"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.forName("Miscellaneous Technical"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_TECHNICAL,
                 Character.UnicodeBlock.forName("MiscellaneousTechnical"))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.forName("CONTROL_PICTURES"))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.forName("Control Pictures"))
    assertEquals(Character.UnicodeBlock.CONTROL_PICTURES,
                 Character.UnicodeBlock.forName("ControlPictures"))
    assertEquals(
      Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
      Character.UnicodeBlock.forName("OPTICAL_CHARACTER_RECOGNITION"))
    assertEquals(
      Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
      Character.UnicodeBlock.forName("Optical Character Recognition"))
    assertEquals(Character.UnicodeBlock.OPTICAL_CHARACTER_RECOGNITION,
                 Character.UnicodeBlock.forName("OpticalCharacterRecognition"))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.forName("ENCLOSED_ALPHANUMERICS"))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.forName("Enclosed Alphanumerics"))
    assertEquals(Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS,
                 Character.UnicodeBlock.forName("EnclosedAlphanumerics"))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.forName("BOX_DRAWING"))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.forName("Box Drawing"))
    assertEquals(Character.UnicodeBlock.BOX_DRAWING,
                 Character.UnicodeBlock.forName("BoxDrawing"))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.forName("BLOCK_ELEMENTS"))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.forName("Block Elements"))
    assertEquals(Character.UnicodeBlock.BLOCK_ELEMENTS,
                 Character.UnicodeBlock.forName("BlockElements"))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.forName("GEOMETRIC_SHAPES"))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.forName("Geometric Shapes"))
    assertEquals(Character.UnicodeBlock.GEOMETRIC_SHAPES,
                 Character.UnicodeBlock.forName("GeometricShapes"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.forName("MISCELLANEOUS_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.forName("Miscellaneous Symbols"))
    assertEquals(Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS,
                 Character.UnicodeBlock.forName("MiscellaneousSymbols"))
    assertEquals(Character.UnicodeBlock.DINGBATS,
                 Character.UnicodeBlock.forName("DINGBATS"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
      Character.UnicodeBlock.forName("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
      Character.UnicodeBlock.forName("Miscellaneous Mathematical Symbols-A"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
      Character.UnicodeBlock.forName("MiscellaneousMathematicalSymbols-A"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.forName("SUPPLEMENTAL_ARROWS_A"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.forName("Supplemental Arrows-A"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_A,
                 Character.UnicodeBlock.forName("SupplementalArrows-A"))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.forName("BRAILLE_PATTERNS"))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.forName("Braille Patterns"))
    assertEquals(Character.UnicodeBlock.BRAILLE_PATTERNS,
                 Character.UnicodeBlock.forName("BraillePatterns"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.forName("SUPPLEMENTAL_ARROWS_B"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.forName("Supplemental Arrows-B"))
    assertEquals(Character.UnicodeBlock.SUPPLEMENTAL_ARROWS_B,
                 Character.UnicodeBlock.forName("SupplementalArrows-B"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
      Character.UnicodeBlock.forName("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
      Character.UnicodeBlock.forName("Miscellaneous Mathematical Symbols-B"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
      Character.UnicodeBlock.forName("MiscellaneousMathematicalSymbols-B"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
      Character.UnicodeBlock.forName("SUPPLEMENTAL_MATHEMATICAL_OPERATORS"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
      Character.UnicodeBlock.forName("Supplemental Mathematical Operators"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
      Character.UnicodeBlock.forName("SupplementalMathematicalOperators"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
      Character.UnicodeBlock.forName("MISCELLANEOUS_SYMBOLS_AND_ARROWS"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
      Character.UnicodeBlock.forName("Miscellaneous Symbols and Arrows"))
    assertEquals(
      Character.UnicodeBlock.MISCELLANEOUS_SYMBOLS_AND_ARROWS,
      Character.UnicodeBlock.forName("MiscellaneousSymbolsandArrows"))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.forName("CJK_RADICALS_SUPPLEMENT"))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.forName("CJK Radicals Supplement"))
    assertEquals(Character.UnicodeBlock.CJK_RADICALS_SUPPLEMENT,
                 Character.UnicodeBlock.forName("CJKRadicalsSupplement"))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.forName("KANGXI_RADICALS"))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.forName("Kangxi Radicals"))
    assertEquals(Character.UnicodeBlock.KANGXI_RADICALS,
                 Character.UnicodeBlock.forName("KangxiRadicals"))
    assertEquals(
      Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
      Character.UnicodeBlock.forName("IDEOGRAPHIC_DESCRIPTION_CHARACTERS"))
    assertEquals(
      Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
      Character.UnicodeBlock.forName("Ideographic Description Characters"))
    assertEquals(
      Character.UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
      Character.UnicodeBlock.forName("IdeographicDescriptionCharacters"))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.forName("CJK_SYMBOLS_AND_PUNCTUATION"))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.forName("CJK Symbols and Punctuation"))
    assertEquals(Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION,
                 Character.UnicodeBlock.forName("CJKSymbolsandPunctuation"))
    assertEquals(Character.UnicodeBlock.HIRAGANA,
                 Character.UnicodeBlock.forName("HIRAGANA"))
    assertEquals(Character.UnicodeBlock.KATAKANA,
                 Character.UnicodeBlock.forName("KATAKANA"))
    assertEquals(Character.UnicodeBlock.BOPOMOFO,
                 Character.UnicodeBlock.forName("BOPOMOFO"))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.forName("HANGUL_COMPATIBILITY_JAMO"))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.forName("Hangul Compatibility Jamo"))
    assertEquals(Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO,
                 Character.UnicodeBlock.forName("HangulCompatibilityJamo"))
    assertEquals(Character.UnicodeBlock.KANBUN,
                 Character.UnicodeBlock.forName("KANBUN"))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.forName("BOPOMOFO_EXTENDED"))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.forName("Bopomofo Extended"))
    assertEquals(Character.UnicodeBlock.BOPOMOFO_EXTENDED,
                 Character.UnicodeBlock.forName("BopomofoExtended"))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("KATAKANA_PHONETIC_EXTENSIONS"))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("Katakana Phonetic Extensions"))
    assertEquals(Character.UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS,
                 Character.UnicodeBlock.forName("KatakanaPhoneticExtensions"))
    assertEquals(
      Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
      Character.UnicodeBlock.forName("ENCLOSED_CJK_LETTERS_AND_MONTHS"))
    assertEquals(
      Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
      Character.UnicodeBlock.forName("Enclosed CJK Letters and Months"))
    assertEquals(Character.UnicodeBlock.ENCLOSED_CJK_LETTERS_AND_MONTHS,
                 Character.UnicodeBlock.forName("EnclosedCJKLettersandMonths"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.forName("CJK_COMPATIBILITY"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.forName("CJK Compatibility"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY,
                 Character.UnicodeBlock.forName("CJKCompatibility"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
      Character.UnicodeBlock.forName("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
      Character.UnicodeBlock.forName("CJK Unified Ideographs Extension A"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
      Character.UnicodeBlock.forName("CJKUnifiedIdeographsExtensionA"))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.forName("YIJING_HEXAGRAM_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.forName("Yijing Hexagram Symbols"))
    assertEquals(Character.UnicodeBlock.YIJING_HEXAGRAM_SYMBOLS,
                 Character.UnicodeBlock.forName("YijingHexagramSymbols"))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJK_UNIFIED_IDEOGRAPHS"))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJK Unified Ideographs"))
    assertEquals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJKUnifiedIdeographs"))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.forName("YI_SYLLABLES"))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.forName("Yi Syllables"))
    assertEquals(Character.UnicodeBlock.YI_SYLLABLES,
                 Character.UnicodeBlock.forName("YiSyllables"))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.forName("YI_RADICALS"))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.forName("Yi Radicals"))
    assertEquals(Character.UnicodeBlock.YI_RADICALS,
                 Character.UnicodeBlock.forName("YiRadicals"))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.forName("HANGUL_SYLLABLES"))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.forName("Hangul Syllables"))
    assertEquals(Character.UnicodeBlock.HANGUL_SYLLABLES,
                 Character.UnicodeBlock.forName("HangulSyllables"))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.forName("HIGH_SURROGATES"))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.forName("High Surrogates"))
    assertEquals(Character.UnicodeBlock.HIGH_SURROGATES,
                 Character.UnicodeBlock.forName("HighSurrogates"))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.forName("HIGH_PRIVATE_USE_SURROGATES"))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.forName("High Private Use Surrogates"))
    assertEquals(Character.UnicodeBlock.HIGH_PRIVATE_USE_SURROGATES,
                 Character.UnicodeBlock.forName("HighPrivateUseSurrogates"))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.forName("LOW_SURROGATES"))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.forName("Low Surrogates"))
    assertEquals(Character.UnicodeBlock.LOW_SURROGATES,
                 Character.UnicodeBlock.forName("LowSurrogates"))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.forName("PRIVATE_USE_AREA"))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.forName("Private Use Area"))
    assertEquals(Character.UnicodeBlock.PRIVATE_USE_AREA,
                 Character.UnicodeBlock.forName("PrivateUseArea"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJK_COMPATIBILITY_IDEOGRAPHS"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJK Compatibility Ideographs"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS,
                 Character.UnicodeBlock.forName("CJKCompatibilityIdeographs"))
    assertEquals(
      Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
      Character.UnicodeBlock.forName("ALPHABETIC_PRESENTATION_FORMS"))
    assertEquals(
      Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
      Character.UnicodeBlock.forName("Alphabetic Presentation Forms"))
    assertEquals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS,
                 Character.UnicodeBlock.forName("AlphabeticPresentationForms"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.forName("ARABIC_PRESENTATION_FORMS_A"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.forName("Arabic Presentation Forms-A"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_A,
                 Character.UnicodeBlock.forName("ArabicPresentationForms-A"))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.forName("VARIATION_SELECTORS"))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.forName("Variation Selectors"))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS,
                 Character.UnicodeBlock.forName("VariationSelectors"))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.forName("COMBINING_HALF_MARKS"))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.forName("Combining Half Marks"))
    assertEquals(Character.UnicodeBlock.COMBINING_HALF_MARKS,
                 Character.UnicodeBlock.forName("CombiningHalfMarks"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.forName("CJK_COMPATIBILITY_FORMS"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.forName("CJK Compatibility Forms"))
    assertEquals(Character.UnicodeBlock.CJK_COMPATIBILITY_FORMS,
                 Character.UnicodeBlock.forName("CJKCompatibilityForms"))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.forName("SMALL_FORM_VARIANTS"))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.forName("Small Form Variants"))
    assertEquals(Character.UnicodeBlock.SMALL_FORM_VARIANTS,
                 Character.UnicodeBlock.forName("SmallFormVariants"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.forName("ARABIC_PRESENTATION_FORMS_B"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.forName("Arabic Presentation Forms-B"))
    assertEquals(Character.UnicodeBlock.ARABIC_PRESENTATION_FORMS_B,
                 Character.UnicodeBlock.forName("ArabicPresentationForms-B"))
    assertEquals(
      Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
      Character.UnicodeBlock.forName("HALFWIDTH_AND_FULLWIDTH_FORMS"))
    assertEquals(
      Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
      Character.UnicodeBlock.forName("Halfwidth and Fullwidth Forms"))
    assertEquals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS,
                 Character.UnicodeBlock.forName("HalfwidthandFullwidthForms"))
    assertEquals(Character.UnicodeBlock.SPECIALS,
                 Character.UnicodeBlock.forName("SPECIALS"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_SYLLABARY,
                 Character.UnicodeBlock.forName("LINEAR_B_SYLLABARY"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_SYLLABARY,
                 Character.UnicodeBlock.forName("Linear B Syllabary"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_SYLLABARY,
                 Character.UnicodeBlock.forName("LinearBSyllabary"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_IDEOGRAMS,
                 Character.UnicodeBlock.forName("LINEAR_B_IDEOGRAMS"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_IDEOGRAMS,
                 Character.UnicodeBlock.forName("Linear B Ideograms"))
    assertEquals(Character.UnicodeBlock.LINEAR_B_IDEOGRAMS,
                 Character.UnicodeBlock.forName("LinearBIdeograms"))
    assertEquals(Character.UnicodeBlock.AEGEAN_NUMBERS,
                 Character.UnicodeBlock.forName("AEGEAN_NUMBERS"))
    assertEquals(Character.UnicodeBlock.AEGEAN_NUMBERS,
                 Character.UnicodeBlock.forName("Aegean Numbers"))
    assertEquals(Character.UnicodeBlock.AEGEAN_NUMBERS,
                 Character.UnicodeBlock.forName("AegeanNumbers"))
    assertEquals(Character.UnicodeBlock.OLD_ITALIC,
                 Character.UnicodeBlock.forName("OLD_ITALIC"))
    assertEquals(Character.UnicodeBlock.OLD_ITALIC,
                 Character.UnicodeBlock.forName("Old Italic"))
    assertEquals(Character.UnicodeBlock.OLD_ITALIC,
                 Character.UnicodeBlock.forName("OldItalic"))
    assertEquals(Character.UnicodeBlock.GOTHIC,
                 Character.UnicodeBlock.forName("GOTHIC"))
    assertEquals(Character.UnicodeBlock.UGARITIC,
                 Character.UnicodeBlock.forName("UGARITIC"))
    assertEquals(Character.UnicodeBlock.DESERET,
                 Character.UnicodeBlock.forName("DESERET"))
    assertEquals(Character.UnicodeBlock.SHAVIAN,
                 Character.UnicodeBlock.forName("SHAVIAN"))
    assertEquals(Character.UnicodeBlock.OSMANYA,
                 Character.UnicodeBlock.forName("OSMANYA"))
    assertEquals(Character.UnicodeBlock.CYPRIOT_SYLLABARY,
                 Character.UnicodeBlock.forName("CYPRIOT_SYLLABARY"))
    assertEquals(Character.UnicodeBlock.CYPRIOT_SYLLABARY,
                 Character.UnicodeBlock.forName("Cypriot Syllabary"))
    assertEquals(Character.UnicodeBlock.CYPRIOT_SYLLABARY,
                 Character.UnicodeBlock.forName("CypriotSyllabary"))
    assertEquals(Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("BYZANTINE_MUSICAL_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("Byzantine Musical Symbols"))
    assertEquals(Character.UnicodeBlock.BYZANTINE_MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("ByzantineMusicalSymbols"))
    assertEquals(Character.UnicodeBlock.MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("MUSICAL_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("Musical Symbols"))
    assertEquals(Character.UnicodeBlock.MUSICAL_SYMBOLS,
                 Character.UnicodeBlock.forName("MusicalSymbols"))
    assertEquals(Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS,
                 Character.UnicodeBlock.forName("TAI_XUAN_JING_SYMBOLS"))
    assertEquals(Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS,
                 Character.UnicodeBlock.forName("Tai Xuan Jing Symbols"))
    assertEquals(Character.UnicodeBlock.TAI_XUAN_JING_SYMBOLS,
                 Character.UnicodeBlock.forName("TaiXuanJingSymbols"))
    assertEquals(
      Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
      Character.UnicodeBlock.forName("MATHEMATICAL_ALPHANUMERIC_SYMBOLS"))
    assertEquals(
      Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
      Character.UnicodeBlock.forName("Mathematical Alphanumeric Symbols"))
    assertEquals(
      Character.UnicodeBlock.MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
      Character.UnicodeBlock.forName("MathematicalAlphanumericSymbols"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
      Character.UnicodeBlock.forName("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
      Character.UnicodeBlock.forName("CJK Unified Ideographs Extension B"))
    assertEquals(
      Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
      Character.UnicodeBlock.forName("CJKUnifiedIdeographsExtensionB"))
    assertEquals(
      Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
      Character.UnicodeBlock.forName("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"))
    assertEquals(
      Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
      Character.UnicodeBlock.forName("CJK Compatibility Ideographs Supplement"))
    assertEquals(
      Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
      Character.UnicodeBlock.forName("CJKCompatibilityIdeographsSupplement"))
    assertEquals(Character.UnicodeBlock.TAGS,
                 Character.UnicodeBlock.forName("TAGS"))
    assertEquals(
      Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT,
      Character.UnicodeBlock.forName("VARIATION_SELECTORS_SUPPLEMENT"))
    assertEquals(
      Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT,
      Character.UnicodeBlock.forName("Variation Selectors Supplement"))
    assertEquals(Character.UnicodeBlock.VARIATION_SELECTORS_SUPPLEMENT,
                 Character.UnicodeBlock.forName("VariationSelectorsSupplement"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A,
      Character.UnicodeBlock.forName("SUPPLEMENTARY_PRIVATE_USE_AREA_A"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A,
      Character.UnicodeBlock.forName("Supplementary Private Use Area-A"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_A,
      Character.UnicodeBlock.forName("SupplementaryPrivateUseArea-A"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B,
      Character.UnicodeBlock.forName("SUPPLEMENTARY_PRIVATE_USE_AREA_B"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B,
      Character.UnicodeBlock.forName("Supplementary Private Use Area-B"))
    assertEquals(
      Character.UnicodeBlock.SUPPLEMENTARY_PRIVATE_USE_AREA_B,
      Character.UnicodeBlock.forName("SupplementaryPrivateUseArea-B"))
  }
  // scalastyle:on line.size.limit

  test("forName should throw IllegalArgumentException") {
    expectThrows(classOf[IllegalArgumentException],
                 Character.UnicodeBlock.forName("INVALID_NAME"))
  }
}
