// format: off

package java.nio

% types = [('Char', '2'),
%          ('Short', '2'),
%          ('Int', '4'),
%          ('Long', '8'),
%          ('Float', '4'),
%          ('Double', '8')]
% for (T, size) in types:
private[nio] final class MappedByteBuffer${T}View private (
    _capacity: Int,
    override private[nio] val _mappedData: MappedByteBufferData,
    override private[nio] val _offset: Int,
    _initialPosition: Int,
    _initialLimit: Int,
    _readOnly: Boolean,
    override private[nio] val isBigEndian: Boolean
) extends ${T}Buffer(_capacity, if(_mappedData.data != null) _mappedData.data + _offset else _mappedData.data) {

  position(_initialPosition)
  limit(_initialLimit)

  private implicit def newMapped${T}BufferView
      : GenMappedBufferView.NewMappedBufferView[${T}Buffer] =
    MappedByteBuffer${T}View.NewMappedByteBuffer${T}View

  def isReadOnly(): Boolean = _readOnly

  def isDirect(): Boolean = true

  @noinline
  def slice(): ${T}Buffer =
    GenMappedBufferView[${T}Buffer](this).generic_slice()

  @noinline
  def slice(index: Int, length: Int): ${T}Buffer =
    GenMappedBufferView[${T}Buffer](this).generic_slice(index, length)

  @noinline
  def duplicate(): ${T}Buffer =
    GenMappedBufferView[${T}Buffer](this).generic_duplicate()

  @noinline
  def asReadOnlyBuffer(): ${T}Buffer =
    GenMappedBufferView[${T}Buffer](this).generic_asReadOnlyBuffer()

  % if T == 'Char':
  def subSequence(start: Int, end: Int): ${T}Buffer = {
    if (start < 0 || end < start || end > remaining())
      throw new IndexOutOfBoundsException
    new MappedByteBuffer${T}View(
      capacity(),
      _mappedData,
      _offset,
      position() + start,
      position() + end,
      isReadOnly(),
      isBigEndian
    )
  }
  % end

  @noinline
  override def get(dst: Array[${T}], offset: Int, length: Int): ${T}Buffer =
    GenBuffer[${T}Buffer](this).generic_get(dst, offset, length)

  @noinline
  override def put(src: Array[${T}], offset: Int, length: Int): ${T}Buffer =
    GenBuffer[${T}Buffer](this).generic_put(src, offset, length)

  @noinline
  def compact(): ${T}Buffer =
    GenMappedBufferView[${T}Buffer](this).generic_compact()

  @noinline
  def order(): ByteOrder =
    GenMappedBufferView[${T}Buffer](this).generic_order()

  // Private API

  @inline
  private[nio] override def load(index: Int): ${T} =
    GenMappedBufferView[${T}Buffer](this).byteArrayBits.load${T}(index)

  @inline
  private[nio] override def store(index: Int, elem: ${T}): Unit =
    GenMappedBufferView[${T}Buffer](this).byteArrayBits.store${T}(index, elem)
}

private[nio] object MappedByteBuffer${T}View {
  private[nio] implicit object NewMappedByteBuffer${T}View
      extends GenMappedBufferView.NewMappedBufferView[${T}Buffer] {
    def bytesPerElem: Int = ${size}

    def apply(
        capacity: Int,
        mappedData: MappedByteBufferData,
        byteArrayOffset: Int,
        initialPosition: Int,
        initialLimit: Int,
        readOnly: Boolean,
        isBigEndian: Boolean
    ): ${T}Buffer = {
      new MappedByteBuffer${T}View(
        capacity,
        mappedData,
        byteArrayOffset,
        initialPosition,
        initialLimit,
        readOnly,
        isBigEndian
      )
    }
  }

  @inline
  private[nio] def fromMappedByteBuffer(
      byteBuffer: MappedByteBuffer
  ): ${T}Buffer =
    GenMappedBufferView.generic_fromMappedByteBuffer(byteBuffer)
}
% end
