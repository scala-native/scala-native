// format: off
package java.nio

// Ported from Scala.js
import scala.scalanative.unsafe
import scala.scalanative.unsafe.UnsafeRichArray
import scala.scalanative.runtime.{fromRawPtr, toRawPtr}
import scala.scalanative.runtime.Intrinsics
import scala.scalanative.annotation.alwaysinline

%{
   variants = [
    ('Byte',   '-547316498' , 1, 'Byte'),
    ('Char',   '-182887236' , 2, 'Character'),
    ('Short',  '383731478'  , 2, 'Short'),
    ('Int',    '39599817'   , 4, 'Integer'),
    ('Long',   '-1709696158', 8, 'Long'),
    ('Float',  '1920204022' , 4, 'Float'),
    ('Double', '2140173175' , 8, 'Double')
   ]
}%
% for (T, Seed, unusedSize, unusedJavaType) in variants:
object ${T}Buffer {
  private final val HashSeed = ${Seed} // "java.nio.${T}Buffer".##

  def allocate(capacity: Int): ${T}Buffer = wrap(new Array[${T}](capacity))

% if T == 'Byte': 
  def allocateDirect(capacity: Int): ${T}Buffer = allocate(capacity)
% end

  def wrap(array: Array[${T}], offset: Int, length: Int): ${T}Buffer =
    Heap${T}Buffer.wrap(array, 0, array.length, offset, length, false)

  def wrap(array: Array[${T}]): ${T}Buffer =  wrap(array, 0, array.length)

% if T == 'Char':
  def wrap(csq: CharSequence, start: Int, end: Int): CharBuffer =
    StringCharBuffer.wrap(csq, 0, csq.length(), start, end - start)

  def wrap(csq: CharSequence): CharBuffer = wrap(csq, 0, csq.length())
% end

    // Extended API
% if T == 'Byte':
  def wrapPointer${T}(array: unsafe.Ptr[${T}], length: Int): ${T}Buffer =
    Pointer${T}Buffer.wrap(array, length)
% end
}

abstract class ${T}Buffer private[nio] (
    _capacity: Int,
    override private[nio] val _array: Array[${T}],
    private[nio] val _offset: Int,
    _address: unsafe.CVoidPtr,
) extends Buffer(_capacity, _address)
    with Comparable[${T}Buffer] 
% if T == 'Char':
    with CharSequence
    with Appendable
    with Readable
%end
  {
  private[nio] type ElementType = ${T}
  private[nio] type BufferType = ${T}Buffer

%if T == 'Byte':
  private[nio] var _isBigEndian: Boolean = true
% end

  // TODO: JDK11
  // def mismatch(that: ${T}Buffer): Int  = ???

  private def genBuffer = GenBuffer[${T}Buffer](this)

  private[nio] def this(_capacity: Int, _array: Array[${T}], _offset: Int) = this(_capacity, _array, _offset, _array.atUnsafe(_offset))
  private[nio] def this(_capacity: Int, address: unsafe.CVoidPtr) = this(_capacity, null: Array[${T}], -1, address)

  def slice(): ${T}Buffer
  // Since JDK 13
  def slice(index: Int, length: Int): ${T}Buffer

  def duplicate(): ${T}Buffer

  def asReadOnlyBuffer(): ${T}Buffer

  def get(): ${T} = load(getPosAndAdvanceRead())

  def put(elem: ${T}): ${T}Buffer ={
    ensureNotReadOnly()
    store(getPosAndAdvanceWrite(), elem)
    this
  }

  def get(index: Int): ${T} = load(validateIndex(index))

  def put(index: Int, elem: ${T}): ${T}Buffer = {
    ensureNotReadOnly()
    store(validateIndex(index), elem)
    this
  }
  
  // Since: JDK 13
  def get(index: Int, dst: Array[${T}], offset: Int, length: Int): ${T}Buffer = GenBuffer[${T}Buffer](this).generic_get(index, dst, offset, length)
  def get(index: Int, dst: Array[${T}]): ${T}Buffer = get(index, dst, 0, dst.length) 

  // Since: JDK13
  def put(index: Int, src: Array[${T}], offset: Int, length: Int): ${T}Buffer = GenBuffer[${T}Buffer](this).generic_put(index, src, offset, length)
  def put(index: Int, src: Array[${T}]): ${T}Buffer = put(index, src, 0, src.length)  

  @noinline
  def get(dst: Array[${T}], offset: Int, length: Int): ${T}Buffer =
    genBuffer.generic_get(dst, offset, length)

  def get(dst: Array[${T}]): ${T}Buffer =
    get(dst, 0, dst.length)

  @noinline
  def put(src: ${T}Buffer): ${T}Buffer =
    genBuffer.generic_put(src)
    // Since: JDK16
  def put(index: Int, src: ${T}Buffer, offset: Int, length: Int) = GenBuffer[${T}Buffer](this).generic_put(index, src, offset, length)
    
  @noinline
  def put(src: Array[${T}], offset: Int, length: Int): ${T}Buffer =
    genBuffer.generic_put(src, offset, length)

  final def put(src: Array[${T}]): ${T}Buffer =
    put(src, 0, src.length)

% if T == 'Char':
  def put(src: String, start: Int, end: Int): CharBuffer =
    put(CharBuffer.wrap(src, start, end))

  final def put(src: String): CharBuffer =
    put(src, 0, src.length)
% end 

  @inline final def hasArray(): Boolean =
    genBuffer.generic_hasArray()

  @inline final def array(): Array[${T}] =
    genBuffer.generic_array()

  @inline final def arrayOffset(): Int =
    genBuffer.generic_offset()

  @inline override def position(newPosition: Int): ${T}Buffer = {
    super.position(newPosition)
    this
  }

  @inline override def limit(newLimit: Int): ${T}Buffer = {
    super.limit(newLimit)
    this
  }

  @inline override def mark(): ${T}Buffer = {
    super.mark()
    this
  }

  @inline override def reset(): ${T}Buffer = {
    super.reset()
    this
  }

  @inline override def clear(): ${T}Buffer = {
    super.clear()
    this
  }

  @inline override def flip(): ${T}Buffer = {
    super.flip()
    this
  }

  @inline override def rewind(): ${T}Buffer = {
    super.rewind()
    this
  }

  def compact(): ${T}Buffer

  def isDirect(): Boolean

  // Since JDK 15
  final def isEmpty(): Boolean = remaining() == 0

  // toString(): String inherited from Buffer

  @noinline
  override def hashCode(): Int =
    genBuffer.generic_hashCode(${T}Buffer.HashSeed)

  override def equals(that: Any): Boolean = that match {
    case that: ${T}Buffer => compareTo(that) == 0
    case _                => false
  }

  @noinline
  def compareTo(that: ${T}Buffer): Int =
    genBuffer.generic_compareTo(that)(_.compareTo(_))

%if T == 'Byte':
  final def order(): ByteOrder =
    if (_isBigEndian) ByteOrder.BIG_ENDIAN
    else ByteOrder.LITTLE_ENDIAN
  final def order(bo: ByteOrder): ByteBuffer = {
    if (bo == null)
      throw new NullPointerException
    _isBigEndian = bo == ByteOrder.BIG_ENDIAN
    this
  }
  // Since JDK 9
  final def alignedSlice(unitSize: Int): ByteBuffer = {
    val pos = position()
    val lim = limit()
    val alignedPos = alignmentOffset(pos, unitSize) match {
      case n if n > 0 => pos + (unitSize - n)
      case _ => pos
    }
    val alignedLimit = (lim - alignmentOffset(lim, unitSize))
    if(alignedPos > lim || alignedLimit < pos) slice(pos, 0)
    else slice(alignedPos, alignedLimit - alignedPos)
  }
   // Since JDK 9
  final def alignmentOffset(index: Int, unitSize: Int): Int = {
    require(index >= 0, "Index less then zero: " + index)
    require(unitSize >= 1 && (unitSize & (unitSize - 1)) == 0, "Unit size not a power of two: " + unitSize)
    if(unitSize > 8 && !isDirect()) throw new UnsupportedOperationException("Unit size unsupported for non-direct dufferes: " + unitSize)
    ((this.address.toLong + index) & (unitSize -1)).toInt
  }
%else:
  def order(): ByteOrder
%end 

%if T == 'Byte':
%for (E, unused, Size, JavaType) in variants:
%if E != 'Byte':
  def as${E}Buffer(): ${E}Buffer
  def get${E}(): ${E} = load${E}(getPosAndAdvanceRead(${Size}))
  def put${E}(value: ${E}): ByteBuffer = {
    ensureNotReadOnly()
    store${E}(getPosAndAdvanceWrite(${Size}), value)
  }
  def get${E}(index: Int): ${E} = load${E}(validateIndex(index, ${Size}))
  def put${E}(index: Int, value: ${E}): ByteBuffer = {
    ensureNotReadOnly()
    store${E}(validateIndex(index, ${Size}), value)
  }  
  @alwaysinline private def load${E}(index: Int): ${E} = {
%if E == 'Float':
    val value = Intrinsics.loadInt(Intrinsics.elemRawPtr(_rawAddress, index))
    val maybeReversed = if (isBigEndian) java.lang.Integer.reverseBytes(value) else value
    java.lang.Float.intBitsToFloat(maybeReversed)
%elif E == 'Double':
    val value = Intrinsics.loadLong(Intrinsics.elemRawPtr(_rawAddress, index))
    val maybeReversed = if (isBigEndian) java.lang.Long.reverseBytes(value) else value
    java.lang.Double.longBitsToDouble(maybeReversed)
%else:
    val value = Intrinsics.load${E}(Intrinsics.elemRawPtr(_rawAddress, index))
    val maybeReversed = if (isBigEndian) java.lang.${JavaType}.reverseBytes(value) else value
    maybeReversed
%end
  }
  @alwaysinline private def store${E}(index: Int, value: ${E}): ByteBuffer = {
%if E == 'Float':
    val integerValue = java.lang.Float.floatToIntBits(value)
    val maybeReversed = if (isBigEndian) java.lang.Integer.reverseBytes(integerValue) else integerValue
    Intrinsics.storeInt(Intrinsics.elemRawPtr(_rawAddress, index), maybeReversed)
%elif E == 'Double':
    val integerValue = java.lang.Double.doubleToLongBits(value)
    val maybeReversed = if (isBigEndian) java.lang.Long.reverseBytes(integerValue) else integerValue
    Intrinsics.storeLong(Intrinsics.elemRawPtr(_rawAddress, index), maybeReversed)
%else:
    val maybeReversed = if (isBigEndian) java.lang.${JavaType}.reverseBytes(value) else value
    Intrinsics.store${E}(Intrinsics.elemRawPtr(_rawAddress, index), maybeReversed)
%end
    this
  }
%end
%end

% elif T == 'Char':
  override def toString(): String = {
    if (_array != null) {
      // even if read-only
      new String(_array, position() + _offset, remaining())
    } else {
      val chars = new Array[Char](remaining())
      val savedPos = position()
      get(chars)
      position(savedPos)
      new String(chars)
    }
  }

  final def length(): Int = remaining()

  final def charAt(index: Int): Char = get(position() + index)

  def subSequence(start: Int, end: Int): CharSequence

  def append(csq: CharSequence): CharBuffer =
    put(csq.toString())

  def append(csq: CharSequence, start: Int, end: Int): CharBuffer =
    put(csq.subSequence(start, end).toString())

  def append(c: Char): CharBuffer =
    put(c)

  def read(target: CharBuffer): Int = {
    // Attention: this method must not change this buffer's position
    val n = remaining()
    if (n == 0) -1
    else if (_array != null) {
      // even if read-only
      genBuffer.generic_put(_array, _offset, n)
      n
    } else {
      val savedPos = position()
      target.put(this)
      position(savedPos)
      n
    }
  }
% end

  // Internal API
% if T == 'Byte':
  override private[nio] def isBigEndian: Boolean = _isBigEndian
% end

  @inline
  private[nio] def load(index: Int): ${T} = this.data(index)

  @inline
  private[nio] def store(index: Int, elem: ${T}): Unit = this.data(index) = elem

  @inline
  private[nio] def load(
      startIndex: Int,
      dst: Array[${T}],
      offset: Int,
      length: Int
  ): Unit =
    genBuffer.generic_load(startIndex, dst, offset, length)

  @inline
  private[nio] def store(
      startIndex: Int,
      src: Array[${T}],
      offset: Int,
      length: Int
  ): Unit =
    genBuffer.generic_store(startIndex, src, offset, length)
}

% end