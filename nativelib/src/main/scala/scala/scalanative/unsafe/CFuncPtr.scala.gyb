
// BEWARE: This file is generated - direct edits will be lost.
// Do not edit this it directly other than to remove
// personally identifiable information in sourceLocation lines.
// All direct edits to this file will be lost the next time it
// is generated.
//
// See nativelib runtime/Arrays.scala.gyb for details.

package scala.scalanative
package unsafe

import scala.language.implicitConversions
import scala.scalanative.annotation.alwaysinline
import scala.scalanative.runtime.Boxes._
import scala.scalanative.runtime.{RawPtr, intrinsic}

sealed trait CFuncPtr {
  def rawptr: RawPtr
}

object CFuncPtr {
  @alwaysinline def fromPtr[F <: CFuncPtr](ptr: Ptr[Byte])(
      implicit tag: Tag.CFuncPtrTag[F]): F =
    tag.load(boxToPtr[F](ptr.rawptr), loadPtr = false)

  @alwaysinline def toPtr[T](ptr: CFuncPtr): Ptr[Byte] = {
    boxToPtr[Byte](ptr.rawptr)
  }
}

final class CFuncRawPtr(val rawptr: RawPtr) extends CFuncPtr {
  def as[F <: CFuncPtr](implicit tag: Tag.CFuncPtrTag[F]): F =
    tag.load(boxToPtr[F](rawptr), loadPtr = false)
}

% for N in range(0, 23):
%   args 				 = ", ".join("arg" + str(i) + ": T" + str(i) for i in range(1, N+1))
%   allTps    	 = ", ".join(["T" + str(i) for i in range(1, N+1)] + ["R"])
%   evidences    = ", ".join(["ev{}: Tag[T{}]".format(i, i) for i in range(1, N+1)] + ["evRet: Tag[R]"])
%   CFuncPtrN    = "CFuncPtr{}[{}]".format(N, allTps)
%   FunctionN    = "Function{}[{}]".format(N, allTps)

final class ${CFuncPtrN}(val rawptr: RawPtr) extends CFuncPtr {
  def apply(${args})(implicit ${evidences}): R = intrinsic
}

object CFuncPtr${N}{
  implicit def fromScalaFunction${N}[${allTps}](fn: ${FunctionN}): ${CFuncPtrN} = intrinsic

  def fromRawPtr[${allTps}](ptr: RawPtr): ${CFuncPtrN} = {
    new ${CFuncPtrN}(ptr)
  }
}
% end
