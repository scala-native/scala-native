// format: off

// BEWARE: This file is generated - direct edits will be lost.
// Do not edit this it directly other than to remove
// personally identifiable information in sourceLocation lines.
// All direct edits to this file will be lost the next time it
// is generated.
//
// To generate this file manually execute the python scripts/gyb.py
// script under the project root. For example, from the project root:
//
//   scripts/gyb.py \
//     nativelib/src/main/scala/scala/scalanative/runtime/Arrays.scala.gyb \
//     --line-directive '' \
//     -o nativelib/src/main/scala/scala/scalanative/runtime/Arrays.scala
//
//  After executing the script, you may want to edit this file to remove
//  personally or build-system specific identifiable information.
//
//  The order elements in the output file depends upon the Python version
//  used to execute the gyb.py. Arrays.scala.gyb has a BEWARE: comment near
//  types.items() which gives details.
//
//  Python >= 3.6 should give a reproducible output order and reduce trivial
//  & annoying git differences.

package scala.scalanative
package runtime

import scalanative.unsafe._
import scalanative.unsigned._
import scala.scalanative.memory.SafeZone
import scalanative.runtime.Intrinsics._

sealed abstract class Array[T]
    extends java.io.Serializable
    with java.lang.Cloneable {

  /** Number of elements of the array. */
  @inline def length: Int = {
    val rawptr = castObjectToRawPtr(this)
    val lenptr = elemRawPtr(rawptr, MemoryLayout.Array.LengthOffset)
    loadInt(lenptr)
  }

  /** Size between elements in the array. */
  def stride: Int

  /** Pointer to the element. */
  @inline def at(i: Int): Ptr[T] = fromRawPtr[T](atRaw(i))

  /** Pointer to the element without a bounds check. */
  @inline def atUnsafe(i: Int): Ptr[T] = fromRawPtr[T](atRawUnsafe(i))

  /** Raw pointer to the element. */
  def atRaw(i: Int): RawPtr

  /** Raw pointer to the element without a bounds check. */
  def atRawUnsafe(i: Int): RawPtr

  /** Loads element at i, throws ArrayIndexOutOfBoundsException. */
  def apply(i: Int): T

  /** Stores value to element i, throws ArrayIndexOutOfBoundsException. */
  def update(i: Int, value: T): Unit

  /** Create a shallow copy of given array. */
  override def clone(): Array[T] = ??? // overriden in concrete classes
}

object Array {
  def copy(from: AnyRef,
           fromPos: Int,
           to: AnyRef,
           toPos: Int,
           len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (!from.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("from argument must be an array")
    } else if (!to.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("to argument must be an array")
    } else {
      copy(from.asInstanceOf[Array[_]],
           fromPos,
           to.asInstanceOf[Array[_]],
           toPos,
           len)
    }
  }

  def copy(from: Array[_],
           fromPos: Int,
           to: Array[_],
           toPos: Int,
           len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (from.getClass != to.getClass) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new ArrayIndexOutOfBoundsException("length is negative")
    } else if (fromPos < 0 || fromPos + len > from.length) {
      throwOutOfBounds(fromPos)
    } else if (toPos < 0 || toPos + len > to.length) {
      throwOutOfBounds(toPos)
    } else if (len == 0) {
      ()
    } else {
      val fromPtr = from.atRaw(fromPos)
      val toPtr   = to.atRaw(toPos)
      val size    = to.stride * len
      libc.memmove(toPtr, fromPtr, castIntToRawSizeUnsigned(size))
    }
  }

  def compare(left: AnyRef,
              leftPos: Int,
              right: AnyRef,
              rightPos: Int,
              len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (!left.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("left argument must be an array")
    } else if (!right.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("right argument must be an array")
    } else {
      compare(left.asInstanceOf[Array[_]],
              leftPos,
              right.asInstanceOf[Array[_]],
              rightPos,
              len)
    }
  }

  def compare(left: Array[_],
              leftPos: Int,
              right: Array[_],
              rightPos: Int,
              len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (left.getClass != right.getClass) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new ArrayIndexOutOfBoundsException("length is negative")
    } else if (leftPos < 0 || leftPos + len > left.length) {
      throwOutOfBounds(leftPos)
    } else if (rightPos < 0 || rightPos + len > right.length) {
      throwOutOfBounds(rightPos)
    } else if (len == 0) {
      0
    } else {
      val leftPtr  = left.atRaw(leftPos)
      val rightPtr = right.atRaw(rightPos)
      libc.memcmp(leftPtr, rightPtr, castIntToRawSizeUnsigned(len * left.stride))
    }
  }
}

%{
   types = {'Boolean': 1, 'Char': 2, 'Byte': 1, 'Short': 2,
            'Int': 4, 'Long': 8, 'Float': 4, 'Double': 8, 'Object': 'castRawSizeToInt(Intrinsics.sizeOf[RawPtr])'}
}%
% # BEWARE: Order of iteration of the dictionary depends on version of Python
% #         used to run this script.
% #         Python as of 3.6 is documented to give insertion order.
% #         Lower versions of Python usually give insertion order but
% #         can and do return arbitrary order.
% #         
% #	    To reduce time consuming git differences, python >= 3.6 should be
% #         used to run this script.
% for T, sizeT in types.items():
%{
   allocGC = 'GC.alloc_atomic' if T != 'Object' else 'GC.alloc'
}%

final class ${T}Array private () extends Array[${T}] {

  @inline def stride: Int = ${sizeT}

  @inline def atRaw(i: Int): RawPtr =
    if (i < 0 || i >= length) {
      throwOutOfBounds(i)
    } else {
      atRawUnsafe(i)
    }

  @inline def atRawUnsafe(i: Int): RawPtr = {
    val rawptr = castObjectToRawPtr(this)
    elemRawPtr(rawptr, MemoryLayout.Array.ValuesOffset + ${sizeT} * i)
  }

  @inline def apply(i: Int): ${T} = load${T}(atRaw(i))

  @inline def update(i: Int, value: ${T}): Unit = store${T}(atRaw(i), value)

  @inline override def clone(): ${T}Array = {
    val arrcls  = classOf[${T}Array]
    val arrsize = MemoryLayout.Array.ValuesOffset + ${sizeT} * length
    val arr     = ${allocGC}(arrcls, arrsize)
    val src     = castObjectToRawPtr(this)
    libc.memcpy(arr, src, castIntToRawSizeUnsigned(arrsize))
    castRawPtrToObject(arr).asInstanceOf[${T}Array]
  }
}

object ${T}Array {

  @inline def alloc(length: Int): ${T}Array = {
    if (length < 0) {
      throw new NegativeArraySizeException
    }
    val arrcls  = classOf[${T}Array]
    val arrsize = MemoryLayout.Array.ValuesOffset + ${sizeT} * length
    val arr = ${allocGC}(arrcls, arrsize) 
    storeInt(elemRawPtr(arr, MemoryLayout.Array.LengthOffset), length)
    storeInt(elemRawPtr(arr, MemoryLayout.Array.StrideOffset), ${sizeT})
    castRawPtrToObject(arr).asInstanceOf[${T}Array]
  }

  @inline def alloc(length: Int, zone: SafeZone): ${T}Array = {
    if (length < 0) {
      throw new NegativeArraySizeException
    }
    val arrcls  = classOf[${T}Array]
    val arrsize = Intrinsics.castIntToRawSizeUnsigned(MemoryLayout.Array.ValuesOffset + ${sizeT} * length)
    val arr = zone.allocImpl(Intrinsics.castObjectToRawPtr(arrcls), arrsize)
    storeInt(elemRawPtr(arr, MemoryLayout.Array.LengthOffset), length)
    storeInt(elemRawPtr(arr, MemoryLayout.Array.StrideOffset), ${sizeT})
    castRawPtrToObject(arr).asInstanceOf[${T}Array]
  }

  @inline def snapshot(length: Int, data: RawPtr): ${T}Array = {
    val arr  = alloc(length)
    val dst  = arr.atRaw(0)
    val src  = data
    val size = castIntToRawSizeUnsigned(${sizeT} * length)
    libc.memcpy(dst, src, size)
    arr
  }
}
% end
