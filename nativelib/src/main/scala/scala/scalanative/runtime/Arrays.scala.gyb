package scala.scalanative
package runtime

import scalanative.native._
import scalanative.runtime.Intrinsics._

sealed abstract class Array[T]
    extends java.io.Serializable with java.lang.Cloneable {
  /** Number of elements of the array. */
  @inline def length: Int =
    // TODO: Update once we support ptr->field
    !(this.cast[Ptr[Byte]] + sizeof[Ptr[Byte]]).cast[Ptr[Int]]

  /** Size between elements in the array. */
  def stride: CSize

  /** Pointer to the element. */
  def at(i: Int): Ptr[T]

  /** Loads element at i, throws IndexOutOfBoundsException. */
  def apply(i: Int): T

  /** Stores value to element i, throws IndexOutOfBoundsException. */
  def update(i: Int, value: T): Unit

  /** Create a shallow of given array. */
  override def clone(): Array[T] = ??? // overriden in concrete classes
}

object Array {
  type Header = CStruct3[Ptr[Type], Int, Int]

  implicit class HeaderOps(val self: Ptr[Header]) extends AnyVal {
    @inline def info: Ptr[Type]                = !(self._1)
    @inline def info_=(value: Ptr[Type]): Unit = !(self._1) = value
    @inline def length: Int                    = !(self._2)
    @inline def length_=(value: Int): Unit     = !(self._2) = value
    @inline def stride: CSize                  = !(self._3).asInstanceOf[CSize]
    @inline def stride_=(value: CSize): Unit   = !(self._3) = value.asInstanceOf[Int]
  }

  def copy(from: AnyRef, fromPos: Int,
           to: AnyRef, toPos: Int, len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (!from.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("from argument must be an array")
    } else if (!to.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("to argument must be an array")
    } else {
      copy(from.asInstanceOf[Array[_]], fromPos,
           to.asInstanceOf[Array[_]], toPos, len)
    }
  }

  def copy(from: Array[_], fromPos: Int,
           to: Array[_], toPos: Int, len: Int): Unit = {
    if (from == null || to == null) {
      throw new NullPointerException()
    } else if (getType(from) != getType(to)) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new IndexOutOfBoundsException("length is negative")
    } else if (fromPos < 0 || fromPos + len > from.length) {
      throw new IndexOutOfBoundsException(fromPos.toString)
    } else if (toPos < 0 || toPos + len > to.length) {
      throw new IndexOutOfBoundsException(toPos.toString)
    } else if (len == 0) {
      ()
    } else {
      val fromPtr = from.at(fromPos).cast[Ptr[Byte]]
      val toPtr   = to.at(toPos).cast[Ptr[Byte]]
      val size    = to.stride * len

      `llvm.memmove.p0i8.p0i8.i64`(toPtr, fromPtr, size, 1, false)
    }
  }

  def compare(left: AnyRef, leftPos: Int,
              right: AnyRef, rightPos: Int, len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (!left.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("left argument must be an array")
    } else if (!right.isInstanceOf[Array[_]]) {
      throw new IllegalArgumentException("right argument must be an array")
    } else {
      compare(left.asInstanceOf[Array[_]], leftPos,
              right.asInstanceOf[Array[_]], rightPos, len)
    }
  }

  def compare(left: Array[_], leftPos: Int,
              right: Array[_], rightPos: Int, len: Int): Int = {
    if (left == null || right == null) {
      throw new NullPointerException()
    } else if (getType(left) != getType(right)) {
      throw new ArrayStoreException("Invalid array copy.")
    } else if (len < 0) {
      throw new IndexOutOfBoundsException("length is negative")
    } else if (leftPos < 0 || leftPos + len > left.length) {
      throw new IndexOutOfBoundsException(leftPos.toString)
    } else if (rightPos < 0 || rightPos + len > right.length) {
      throw new IndexOutOfBoundsException(rightPos.toString)
    } else if (len == 0) {
      0
    } else {
      val leftPtr  = left.at(leftPos).cast[Ptr[Byte]]
      val rightPtr = right.at(rightPos).cast[Ptr[Byte]]
      libc.memcmp(leftPtr, rightPtr, len * left.stride)
    }
  }
}

%{
   types = ['Unit', 'Boolean', 'Char', 'Byte', 'Short',
            'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

%{
   alloc = 'GC.alloc_atomic' if T != 'Object' and T != 'Unit' else 'GC.alloc'
}%

final class ${T}Array private () extends Array[${T}] {
  import Array._

  @inline def stride: CSize =
    sizeof[${T}]

  @inline def at(i: Int): Ptr[${T}] =
    if (i < 0 || i >= length) {
      throw new IndexOutOfBoundsException(i.toString)
    } else {
      val first = this.cast[Ptr[Byte]] + sizeof[Header]
      val ith   = first + stride * i

      ith.cast[Ptr[${T}]]
    }
  @inline def apply(i: Int): ${T} =
    !at(i)

  @inline def update(i: Int, value: ${T}): Unit =
    !at(i) = value

  @inline override def clone(): ${T}Array = {
    val arrinfo = typeof[${T}Array].cast[Ptr[ClassType]]
    val arrsize = sizeof[Header] + sizeof[${T}] * length
    val arr     = ${alloc}(arrinfo, arrsize)
    `llvm.memcpy.p0i8.p0i8.i64`(arr.cast[Ptr[Byte]], this.cast[Ptr[Byte]], arrsize, 1, false)
    arr.cast[${T}Array]
  }
}

object ${T}Array {
  import Array._

  @inline def alloc(length: Int): ${T}Array = {
    val arrinfo = typeof[${T}Array].cast[Ptr[ClassType]]
    val arrsize = sizeof[Header] + sizeof[${T}] * length
    val arr     = ${alloc}(arrinfo, arrsize).cast[Ptr[Header]]
    arr.length  = length
    arr.stride  = sizeof[${T}]
    arr.cast[${T}Array]
  }

  @inline def snapshot(length: Int, data: Ptr[${T}]): ${T}Array = {
    val arr  = alloc(length)
    val dst  = arr.at(0).asInstanceOf[Ptr[Byte]]
    val src  = data.asInstanceOf[Ptr[Byte]]
    val size = sizeof[${T}] * length
    `llvm.memcpy.p0i8.p0i8.i64`(dst, src, size, 1, false)
    arr
  }
}

% end
