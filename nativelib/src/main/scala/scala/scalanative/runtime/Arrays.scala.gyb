package scala.scalanative
package runtime

// Note 1:
// Arrays.scala is currently implemented as textual templating that is expanded through project/gyb.py script. 
// Update Arrays.scala.gyb and re-generate the source

// Note 2:
// Array of primitiveTypes don't contain pointers, runtime.allocAtomic() is called for memory allocation   
// Array of Object do contain pointers. runtime.alloc() is called for memory allocation

%{
   primitiveTypes = ['Boolean', 'Char', 'Byte', 'Short',
            'Int', 'Long', 'Float', 'Double']
}%

import native._

@struct class ArrayHeader(val info: Ptr[_], val length: Int)

sealed abstract class Array[T]
    extends java.io.Serializable with java.lang.Cloneable {
  /** Number of elements of the array. */
  def length: Int =
    // TODO: Update once we support ptr->field
    !(this.cast[Ptr[Byte]] + sizeof[Ptr[_]]).cast[Ptr[Int]]

  /** Loads element at i, throws IndexOutOfBoundsException. */
  def apply(i: Int): T

  /** Stores value to element i, throws IndexOutOfBoundsException. */
  def update(i: Int, value: T): Unit

  /** Create a shallow of given array. */
  protected override def clone(): Array[T] = undefined
}

final class ObjectArray private () extends Array[Object] {
  def apply(i: Int): Object =
    if (i < 0 || i >= length)
      throw new IndexOutOfBoundsException(i.toString)
    else {
      val headptr = (this.cast[Ptr[Byte]] + sizeof[ArrayHeader]).cast[Ptr[Object]]
      headptr(i)
    }

  def update(i: Int, value: Object): Unit =
    if (i < 0 || i >= length)
      throw new IndexOutOfBoundsException(i.toString)
    else {
      val headptr = (this.cast[Ptr[Byte]] + sizeof[ArrayHeader]).cast[Ptr[Object]]
      headptr(i) = value
    }

  protected override def clone(): ObjectArray = {
    val newarr = ObjectArray.alloc(length)
    ObjectArray.copy(this, 0, newarr, 0, length)
    newarr
  }
}

object ObjectArray {
  def copy(from: ObjectArray, fromPos: Int,
           to: ObjectArray, toPos: Int, length: Int): Unit = {
    ???
  }

  def alloc(length: Int): ObjectArray = {
    val arrinfo = infoof[ObjectArray]
    val arrsize = sizeof[ArrayHeader] + sizeof[Object] * length
    val arr = runtime.alloc(arrinfo, arrsize)    
    // set the length
    !(arr.cast[Ptr[Byte]] + sizeof[Ptr[_]]).cast[Ptr[Int]] = length    
    arr.cast[ObjectArray]        
  }
}

% for T in primitiveTypes:

final class ${T}Array private () extends Array[${T}] {
  def apply(i: Int): ${T} =
    if (i < 0 || i >= length)
      throw new IndexOutOfBoundsException(i.toString)
    else {
      val headptr = (this.cast[Ptr[Byte]] + sizeof[ArrayHeader]).cast[Ptr[${T}]]
      headptr(i)
    }

  def update(i: Int, value: ${T}): Unit =
    if (i < 0 || i >= length)
      throw new IndexOutOfBoundsException(i.toString)
    else {
      val headptr = (this.cast[Ptr[Byte]] + sizeof[ArrayHeader]).cast[Ptr[${T}]]
      headptr(i) = value
    }

  protected override def clone(): ${T}Array = {
    val newarr = ${T}Array.alloc(length)
    ${T}Array.copy(this, 0, newarr, 0, length)
    newarr
  }
}

object ${T}Array {
  def copy(from: ${T}Array, fromPos: Int,
           to: ${T}Array, toPos: Int, length: Int): Unit = {
    ???
  }

  def alloc(length: Int): ${T}Array = {
    val arrinfo = infoof[${T}Array]
    val arrsize = sizeof[ArrayHeader] + sizeof[${T}] * length
    val arr = runtime.allocAtomic(arrinfo, arrsize)    
    // set the length
    !(arr.cast[Ptr[Byte]] + sizeof[Ptr[_]]).cast[Ptr[Int]] = length    
    arr.cast[${T}Array]        
  }
}

% end
