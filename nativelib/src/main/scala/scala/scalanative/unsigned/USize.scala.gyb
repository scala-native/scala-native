// format: off

// BEWARE: This file is generated - direct edits will be lost.
// Do not edit this it directly other than to remove
// personally identifiable information in sourceLocation lines.
// All direct edits to this file will be lost the next time it
// is generated.
//
// See nativelib runtime/Arrays.scala.gyb for details.

package scala.scalanative
package unsigned

import scala.language.implicitConversions

import scala.runtime.BoxesRunTime._
import scala.reflect.ClassTag

import scalanative.runtime._
import scalanative.runtime.Intrinsics._
import scalanative.runtime.Boxes._
import unsafe._

import java.lang.{Long => JLong}

final class USize(private[scalanative] val rawSize: RawSize) {
  @inline def toByte: Byte        = castRawSizeToInt(rawSize).toByte
  @inline def toChar: Char        = castRawSizeToInt(rawSize).toChar
  @inline def toShort: Short      = castRawSizeToInt(rawSize).toShort
  @inline def toInt: Int          = castRawSizeToInt(rawSize)
  @inline def toLong: Long        = castRawSizeToLongUnsigned(rawSize)
  @inline def toSize: unsafe.Size = new unsafe.Size(rawSize)

  @inline def toUByte: UByte   = toByte.toUByte
  @inline def toUShort: UShort = toShort.toUShort
  @inline def toUInt: UInt     = new UInt(castRawSizeToInt(rawSize))
  @inline def toULong: ULong   = new ULong(castRawSizeToLongUnsigned(rawSize))

  @inline def toPtr[T]: Ptr[T] =
    if (is32BitPlatform) fromRawPtr[T](castIntToRawPtr(toInt))
    else fromRawPtr[T](castLongToRawPtr(toLong))

  @inline override def hashCode: Int = toULong.hashCode

  @inline override def equals(other: Any): Boolean =
    (this eq other.asInstanceOf[AnyRef]) || (other match {
      case other: USize =>
        other.rawSize == rawSize
      case _ =>
        false
    })

  @inline override def toString(): String = JLong.toUnsignedString(toLong)

  /**
   * Returns the bitwise negation of this value.
   * @example {{{
   * ~5 == 4294967290
   * // in binary: ~00000101 ==
   * //             11111010
   * }}}
   */
  @inline def unary_~ : USize =
    if (is32BitPlatform) (~toInt).toUSize
    else (~toLong).toUSize

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the new right bits with zeroes.
   * @example {{{ 6 << 3 == 48 // in binary: 0110 << 3 == 0110000 }}}
   */
  @inline def <<(x: Int): USize =
    if (is32BitPlatform) (toInt << x).toUSize
    else (toLong << x).toUSize

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the new right bits with zeroes.
   * @example {{{ 6 << 3 == 48 // in binary: 0110 << 3 == 0110000 }}}
   */
  @inline def <<(x: Long): USize =
    if (is32BitPlatform) (toInt << x.toInt).toUSize
    else (toLong << x).toUSize

  /**
   * Returns this value bit-shifted right by the specified number of bits,
   *         filling the new left bits with zeroes.
   * @example {{{ 21 >>> 3 == 2 // in binary: 010101 >>> 3 == 010 }}}
   * @example {{{
   * 4294967275 >>> 3 == 536870909
   * // in binary: 11111111 11111111 11111111 11101011 >>> 3 ==
   * //            00011111 11111111 11111111 11111101
   * }}}
   */
  @inline def >>>(x: Int): USize =
    if (is32BitPlatform) (toInt >>> x).toUSize
    else (toLong >>> x).toUSize

  /**
   * Returns this value bit-shifted right by the specified number of bits,
   *         filling the new left bits with zeroes.
   * @example {{{ 21 >>> 3 == 2 // in binary: 010101 >>> 3 == 010 }}}
   * @example {{{
   * 4294967275 >>> 3 == 536870909
   * // in binary: 11111111 11111111 11111111 11101011 >>> 3 ==
   * //            00011111 11111111 11111111 11111101
   * }}}
   */
  @inline def >>>(x: Long): USize =
    if (is32BitPlatform) (toInt >>> x.toInt).toUSize
    else (toLong >>> x).toUSize

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the right bits with the same value as the left-most bit of this.
   * @example {{{
   * 4294967275 >> 3 == 4294967293
   * // in binary: 11111111 11111111 11111111 11101011 >> 3 ==
   * //            11111111 11111111 11111111 11111101
   * }}}
   */
  @inline final def >>(x: Int): USize =
    if (is32BitPlatform) (toInt >> x).toUSize
    else (toLong >> x).toUSize

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the right bits with the same value as the left-most bit of this.
   * @example {{{
   * 4294967275 >> 3 == 4294967293
   * // in binary: 11111111 11111111 11111111 11101011 >> 3 ==
   * //            11111111 11111111 11111111 11111101
   * }}}
   */
  @inline final def >>(x: Long): USize =
    if (is32BitPlatform) (toInt >> x.toInt).toUSize
    else (toLong >> x).toUSize

  % cmpOps = [('==', 'Returns `true` if this value is equal to x, `false` otherwise.'),
  %           ('!=', 'Returns `true` if this value is not equal to x, `false` otherwise.'),
  %           ('<', 'Returns `true` if this value is less than x, `false` otherwise.'),
  %           ('<=', 'Returns `true` if this value is less than or equal to x, `false` otherwise.'),
  %           ('>', 'Returns `true` if this value is greater than x, `false` otherwise.'),
  %           ('>=', 'Returns `true` if this value is greater than or equal to x, `false` otherwise.')]
  % for (op, doc) in cmpOps:
  /** ${doc} */
  @inline def ${op}(x: UByte): Boolean = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UShort): Boolean = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UInt): Boolean = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: ULong): Boolean = this.toULong ${op} x

  /** ${doc} */
  @inline def ${op}(other: USize): Boolean =
    if (is32BitPlatform) this.toUInt ${op} other.toUInt
    else this.toULong ${op} other.toULong

  % end
  % binOps = [('&', 'Returns the bitwise AND of this value and `x`.'),
  %           ('|', 'Returns the bitwise OR of this value and `x`.'),
  %           ('^', 'Returns the bitwise XOR of this value and `x`.'),
  %           ('+', 'Returns the sum of this value and `x`.'),
  %           ('-', 'Returns the difference of this value and `x`.'),
  %           ('*', 'Returns the product of this value and `x`.')]
  % for (op, doc) in binOps:
  /** ${doc} */
  @inline def ${op}(x: UByte): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UShort): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UInt): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: ULong): ULong = this.toULong ${op} x

  /** ${doc} */
  @inline def ${op}(other: USize): USize =
    if (is32BitPlatform) new USize(castIntToRawSizeUnsigned(castRawSizeToInt(rawSize) ${op} castRawSizeToInt(other.rawSize)))
    else new USize(castLongToRawSize(castRawSizeToLongUnsigned(rawSize) ${op} castRawSizeToLongUnsigned(other.rawSize)))

  % end

  % binOpsNotInfix = [('/', 'divUInt', 'divULong', 'Returns the quotient of this value and `x`.'),
  %                   ('%', 'remUInt', 'remULong', 'Returns the remainder of the division of this value by `x`.')]
  % for (op, int, long, doc) in binOpsNotInfix:
  /** ${doc} */
  @inline def ${op}(x: UByte): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UShort): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: UInt): USize = this ${op} x.toUSize

  /** ${doc} */
  @inline def ${op}(x: ULong): ULong = this.toULong ${op} x

  /** ${doc} */
  @inline def ${op}(other: USize): USize =
    if (is32BitPlatform) new USize(castIntToRawSizeUnsigned(${int}(castRawSizeToInt(rawSize), castRawSizeToInt(other.rawSize))))
    else new USize(castLongToRawSize(${long}(castRawSizeToLongUnsigned(rawSize), castRawSizeToLongUnsigned(other.rawSize))))

  % end

  // "Rich" API

  @inline final def max(that: USize): USize =
    if (this >= that) this else that
  @inline final def min(that: USize): USize =
    if (this <= that) this else that
}

object USize {
  @inline implicit def ubyteToUSize(x: UByte): USize = x.toUSize
  @inline implicit def ushortToUSize(x: UShort): USize = x.toUSize
  @inline implicit def uintToUSize(x: UInt): USize = x.toUSize
}
