name: Run tests MacOs
on:
  workflow_call:
  pull_request:
  push:
    branches:
      - main
      - 0.4.x
concurrency:
  group: macOS-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    name: Test runtime
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10, 2.12.17]
        gc: [immix]
        include:
          - scala: 2.13.10
            gc: commix
          - scala: 2.13.10
            gc: none
          - scala: 2.12.17
            gc: boehm
          - scala: 3.1.3
            gc: immix

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/macos-setup-env
        id: setup
        with:
          scala-version: ${{matrix.scala}}

      - name: Test runtime
        run: >
          export SCALANATIVE_GC=${{matrix.gc}} &&
          sbt ++${{matrix.scala}}
          "test-runtime ${{matrix.scala}}"

      - name: Test partests infrastructure
        # No partests support for Scala 3
        if: ${{ !startsWith(matrix.scala, '3.') }}
        run: >
          sbt ++${{matrix.scala}}
          "scalaPartestTests${{env.project-version}}/testOnly -- --showDiff neg/abstract.scala pos/abstract.scala run/Course-2002-01.scala"

  run-scripted-tests:
    name: Scripted tests
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        scala: [2.12.17, 3.1.3]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/macos-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Test scripted
        run: |
          export LLVM_BIN=$(brew --prefix llvm@15)/bin
          sbt "test-scripted ${{matrix.scala}}"

  test-multihreading:
    name: Test experimental multithreading support
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10]
        build-mode: [debug]
        gc: [boehm, immix]
        # TODO: atomics, volatiles: disable LTO/releaseFast until volatiles/fences are supported, otherwise clang can produce infinite loops
        lto: [none]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/macos-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Prepare native config command
        shell: bash
        # Linking on MacOS in GithubActions fails when using default linker (ld), use lld instead
        run: |
          buildMode=${{matrix.build-mode}}
          if [[ "$buildMode" == "release-fast" ]]; then 
            buildMode=releaseFast
          fi

          SetConfigTemplate=$(cat << EOM
            nativeConfig ~= { prev =>
              prev
                .withMode(scalanative.build.Mode.${buildMode})
                .withGC(scalanative.build.GC.${{matrix.gc}})
                .withLTO(scalanative.build.LTO.${{matrix.lto}})
                .withEmbedResources(true)
                .withCheck(true)
                .withCheckFatalWarnings(true)
                .withMultithreadingSupport(true)
                .withLinkingOptions(prev.linkingOptions ++ Seq("-fuse-ld=lld") )
            }
          EOM
          )

          echo set-native-config=${SetConfigTemplate} >> $GITHUB_ENV

      - name: Run tests
        # 2x more then it should take to build and run tests
        timeout-minutes: 60
        env:
          TEST_COMMAND: >
            ++${{matrix.scala}} -v;
            set sandbox.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set tests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set junitTestOutputsNative.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set scalaPartestJunitTests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};

            show tests${{env.project-version}}/nativeConfig;

            sandbox${{env.project-version}}/run;
            testsJVM${{env.project-version}}/test;
            tests${{env.project-version}}/test;
            junitTestOutputsJVM${{env.project-version}}/test;
            junitTestOutputsNative${{env.project-version}}/test;
            scalaPartestJunitTests${{env.project-version}}/test
        run: |
          # lld fails to link with BoehmGC when using shared library, force linking using static library
          if [[ "${{matrix.gc}}" == "boehm" ]]; then 
            unlink /usr/local/lib/libgc.dylib
          fi
          export LLVM_BIN="$(brew --prefix llvm@15)/bin"
          $LLVM_BIN/clang --version
          sbt -J-Xmx5G "${TEST_COMMAND}"
