name: Run tests
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  tests-tools:
    name: Compile & test tools
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.3, 2.12.12, 2.11.12]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Calculate binary version
        run: |
          version=${{matrix.scala}}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      - name: Cache SN
        uses: actions/cache@v2
        with:
          path: |
            **/target/scala-${{ env.binary-version }}
          key: ${{ runner.os }}-SN-${{ env.binary-version }}-${{ github.sha }}

      - name: Compile
        run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" compile

      - name: Test tools
        run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" test-tools

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.build-image.outputs.image-name }}
    strategy:
      matrix:
        target-platform: [ library ]

    steps:
      - uses: actions/checkout@v2
      - name: Cache docker
        id: cache
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}
      - name: Run local image registry
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
      - name: Build image
        id: build-image
        run: |
          imageName="scala-native-testing:linux-${{ matrix.target-platform }}"
          echo "::set-output name=image-name::${imageName}"

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker pull localhost:5000/${imageName} || true
          docker build \
          -t ${imageName} \
          --cache-from=localhost:5000/${imageName} \
          --build-arg TARGET_DOCKER_PLATFORM=${{ matrix.target-platform }} \
          --build-arg HOST_ARCHITECTURE=amd64  \
          --cpuset-cpus=0 \
          ci-docker

      - name: Store image in cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          imageName=${{ steps.build-image.outputs.image-name }}
          docker tag $imageName localhost:5000/${imageName} && \
          docker push localhost:5000/${imageName}

  test-runtime:
    name: Test runtime
    runs-on: ${{ matrix.os }}
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.3, 2.12.12, 2.11.12]
        build-mode: [ debug , release-fast ]
        gc: [ boehm, immix, commix ]
        os: [ ubuntu-latest ]
        target-platform: [ library ]
        exclude:
          - scala: 2.13.3
            build-mode: debug
            gc: boehm
            os: ubuntu-latest
            target-platform: library
          - scala: 2.12.12
            build-mode: debug
            gc: immix
            os: ubuntu-latest
            target-platform: library
          - scala: 2.11.12
            build-mode: debug
            gc: commix
            os: ubuntu-latest
            target-platform: library
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      - name: Cache SN
        uses: actions/cache@v2
        with:
          path: |
            **/target/scala-${{ env.binary-version }}
          key: ${{ runner.os }}-SN-${{ env.binary-version }}-${{ github.sha }}

      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALA_VERSION: ${{ matrix.scala}}
          SCALANATIVE_OPTIMIZE: true
          TEST_COMMAND: test-runtime
          TARGET_DOCKER_PLATFORM: ${{ matrix.target-platform }}
        run: ./ci-docker/run-test-gha.sh ${{ needs.build-image.outputs.image-name }}

  test-runtime-no-opt:
    name: Test runtime no-opt
    runs-on: ${{ matrix.os }}
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [ 2.13.3, 2.12.12, 2.11.12 ]
        build-mode: [ debug, release-fast ]
        gc: [ immix ]
        os: [ ubuntu-latest ]
        target-platform: [ library ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      - name: Cache SN
        uses: actions/cache@v2
        with:
          path: |
            **/target/scala-${{ env.binary-version }}
          key: ${{ runner.os }}-SN-${{ env.binary-version }}-${{ github.sha }}

      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALA_VERSION: ${{ matrix.scala}}
          SCALANATIVE_OPTIMIZE: false
          TEST_COMMAND: test-runtime
          TARGET_DOCKER_PLATFORM: ${{ matrix.target-platform }}
        run: ./ci-docker/run-test-gha.sh ${{ needs.build-image.outputs.image-name }}

  test-scripted:
    name: Test scripted
    runs-on: ${{ matrix.os }}
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.3, 2.12.12, 2.11.12]
        build-mode: [ release-fast ]
        gc: [ immix ]
        os: [ ubuntu-latest ]
        target-platform: [ library ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      - name: Cache SN
        uses: actions/cache@v2
        with:
          path: |
            **/target/scala-${{ env.binary-version }}
          key: ${{ runner.os }}-SN-${{ env.binary-version }}-${{ github.sha }}

      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALA_VERSION: ${{ matrix.scala}}
          SCALANATIVE_OPTIMIZE: true
          TEST_COMMAND: test-scripted
          TARGET_DOCKER_PLATFORM: ${{ matrix.target-platform }}
        run: ./ci-docker/run-test-gha.sh ${{ needs.build-image.outputs.image-name }}
