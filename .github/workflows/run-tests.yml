name: Run tests
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  # Compile all sources for given Scala version
  # Cache external dependencies
  # Test tools, if any of them fails, further tests will not start.
  tests-tools:
    name: Compile & test tools
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.4, 2.12.12, 2.11.12]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Calculate binary version
        run: |
          version=${{matrix.scala}}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      # Build cache for library dependencies and SBT. Its crucial for performance to always load this cache
      # We're loading it here, when build, to always have ready cache in the big matrix of runtime tests.
      # Cache is generated based on Scala binary version on contents of build
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      - name: Compile
        run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" compile

      - name: Test tools
        run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" test-tools

  # Build testing image that would be used to build and run against different platforms
  # Currently only Linux x64 is tested
  build-image:
    name: Build image
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.build-image.outputs.image-base-name }}
    strategy:
      matrix:
        arch: [ amd64 ]

    steps:
      - uses: actions/checkout@v2
      # In order to minimize time spend in image build loading we're caching directory of local repository
      # Starting local registry from cache is faster then loading image tars
      # https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
      # This and next stage (start registry) should be used in every step using built images
      # Images are cached based on content of Dockerfile

      # Cache automatically saves content specified paths after executing all steps defined after this one.
      # It will not update cache on hit.
      - name: Cache docker
        id: cache
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}
      - name: Run local image registry
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      # Builds images and saves image base name in output - it allows to re-use it in other steps.
      - name: Build image
        id: build-image
        run: |
          imageBase="scala-native-testing:linux"
          imageName="${imageBase}-${{ matrix.arch }}"
          echo "::set-output name=image-base-name::${imageBase}"
          echo "::set-output name=image-full-name::${imageName}"

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker pull localhost:5000/${imageName} || true
          docker build \
          -t ${imageName} \
          --cache-from=localhost:5000/${imageName} \
          --build-arg TARGET_DOCKER_PLATFORM=library \
          --build-arg HOST_ARCHITECTURE=${{ matrix.arch }}  \
          --cpuset-cpus=0 \
          ci-docker

      - name: Store image in cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          imageName=${{ steps.build-image.outputs.image-full-name }}
          docker tag $imageName localhost:5000/${imageName} && \
          docker push localhost:5000/${imageName}

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    runs-on: ubuntu-latest
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.4, 2.12.12, 2.11.12]
        build-mode: [ debug , release-fast ]
        gc: [ boehm, immix, commix ]
        # Create holes in grid to lower number of tests.
        # Excluded entries should have low impact on overall project coverage
        exclude:
          - scala: 2.13.4
            build-mode: debug
            gc: boehm
          - scala: 2.12.12
            build-mode: debug
            gc: immix
          - scala: 2.11.12
            build-mode: debug
            gc: commix
    steps:
      - uses: actions/checkout@v2
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      # Loads cache with dependencies created in test-tools job
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      # Loads cached content of local docker registry containing built images.
      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALANATIVE_OPTIMIZE: true
          SCALA_VERSION: ${{ matrix.scala}}
          TEST_COMMAND: test-runtime
        run: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}-amd64"

  # This job is basically copy-paste of test-runtime.
  # Main difference is disabled optimization and fixed Immix GC
  test-runtime-no-opt:
    name: Test runtime no-opt
    runs-on: ubuntu-latest
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [ 2.13.4, 2.12.12, 2.11.12 ]
        build-mode: [ debug, release-fast ]
    steps:
      - uses: actions/checkout@v2
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      # Loads cache with dependencies created in test-tools job
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      # Loads cached content of local docker registry containing built images.
      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: false
          SCALA_VERSION: ${{ matrix.scala}}
          TEST_COMMAND: test-runtime
        run: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}-amd64"

  # This job is basically copy-paste of test-runtime.
  # Scripted tests take a long time to run, ~30 minutes, and should be limited and absolute minimum.
  test-scripted:
    name: Test scripted
    runs-on: ubuntu-latest
    needs: [tests-tools, build-image]
    strategy:
      fail-fast: false
      matrix:
        scala: [2.13.4, 2.12.12, 2.11.12]
    steps:
      - uses: actions/checkout@v2
      - name: Calculate binary version
        run: |
          version=${{ matrix.scala }}
          echo "binary-version=${version%.*}" >> $GITHUB_ENV

      # Loads cache with dependencies created in test-tools job
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt/boot
          key: ${{ runner.os }}-deps-${{ env.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}

      # Loads cached content of local docker registry containing built images.
      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}

      - name: Run tests
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: true
          SCALA_VERSION: ${{ matrix.scala}}
          TEST_COMMAND: test-scripted
        run: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}-amd64"
