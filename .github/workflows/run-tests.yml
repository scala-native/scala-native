name: Run tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache Coursier
        uses: actions/cache@v1
        with:
          path: ~/.cache/coursier
          key: ${{ runner.os }}-coursier-${{ matrix.scala.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-coursier-scala-${{ matrix.scala.binary-version }}-
      - name: Cache Ivy
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy-${{ matrix.scala.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-ivy-scala-${{ matrix.scala.binary-version }}-

  test-tools:
    name: Test tools on Scala ${{ matrix.scalaVersion }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scalaVersion: [ 2.13.3, 2.12.2, 2.11.12 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache SBT
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.ivy2/local
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
      - run: sbt
          ++ ${{ matrix.scalaVersion }} -v
          -no-colors
          -J-Xmx3G
          test-tools

  build-test-image:
    name: Build docker image to be used by runtime tests
    runs-on: ubuntu-latest
    needs: test-tools
    strategy:
      matrix:
        targetPlatform: [ library ]
    steps:
      - name: Load cached images
        run: |
          if [[ -d $HOME/docker ]];
          then
            ls $HOME/docker/*.tar.gz | \
            xargs -I {file} sh -c "zcat {file} | docker load"; \
            rm -rf $HOME/docker; \
          fi
      - name: Run multiarch register
        run: |
          docker run
          --rm
          --privileged
          multiarch/qemu-user-static:register;

      - name: Build image
        run: docker build \
          --cache-from scala-native-testing:linux-${{ matrix.targetPlatform }} \
          -t scala-native-testing:linux-${{ matrix.targetPlatform }} \
          --build-arg TARGET_DOCKER_PLATFORM=${{ matrix.targetPlatform }} \
          --build-arg HOST_ARCHITECTURE=amd64 \
          --cpuset-cpus=0 \
          ci-docker;


  test-runtime:
    name: Test runtime on Scala ${{ matrix.scalaVersion }} and ${{ matrix.os }}
    runs-on: {{ matrix.os }}
    needs: build-test-image
    strategy:
        matrix:
          scalaVersion: [2.13.3, 2.12.2, 2.11.12]
          os: [ubuntu-latest]
          targetPlatform: [library]
          buildMode: [debug, release-fast]
          gc: [boehm, immix, commix]
    steps:
      - uses: actions/checkout@v1

      - name: Test non optimized
        run: "docker run \
        -v $HOME/.ivy2:/home/scala-native/.ivy2 \
        -v $HOME/.sbt:/home/scala-native/.sbt \
        -v $PWD:/home/scala-native/scala-native \
        -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
        -e SCALANATIVE_GC=${{ matrix.gc }} \
        -e SCALA_VERSION=${{ matrix.scalaVersion }} \
        -e SCALANATIVE_OPTIMIZE=false \
        -e TEST_COMMAND=test-runtime \
        -it scala-native-testing:linux-${{ matrix.targetPlatform }};"

      - name: Test main grid
        run: "docker run \
        -v $HOME/.ivy2:/home/scala-native/.ivy2 \
        -v $HOME/.sbt:/home/scala-native/.sbt \
        -v $PWD:/home/scala-native/scala-native \
        -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
        -e SCALANATIVE_GC=immix \
        -e SCALA_VERSION=${{ matrix.scalaVersion }} \
        -e SCALANATIVE_OPTIMIZE=true \
        -e TEST_COMMAND=test-runtime \
        -it scala-native-testing:linux-${{ matrix.targetPlatform }};"


  test-scripted:
    name: Test scripted on Scala ${{ matrix.scalaVersion }} and ${{ matrix.os }}
    runs-on: { { matrix.os } }
    needs: build-test-image
    strategy:
      matrix:
        scalaVersion: [ 2.13.3, 2.12.2, 2.11.12 ]
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v1
        run: "docker run \
        -v $HOME/.ivy2:/home/scala-native/.ivy2 \
        -v $HOME/.sbt:/home/scala-native/.sbt \
        -v $PWD:/home/scala-native/scala-native \
        -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
        -e SCALANATIVE_GC=immix \
        -e SCALA_VERSION=${{ matrix.scalaVersion }} \
        -e SCALANATIVE_OPTIMIZE=true \
        -e TEST_COMMAND=test-runtime \
        -it scala-native-testing:linux-${{ matrix.targetPlatform }};"