name: Run tests
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build-plugin:
    name: Build plugin artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scala:
          - { version: "2.13.3",  binary-version: "2.13" }
#          - { version: "2.12.12", binary-version: "2.12" }
#          - { version: "2.11.12", binary-version: "2.11" }
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Coursier
        uses: actions/cache@v1
        with:
          path: ~/.cache/coursier
          key: ${{ runner.os }}-coursier-${{ matrix.scala.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-coursier-scala-${{ matrix.scala.binary-version }}-

      - name: Cache Ivy
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy-${{ matrix.scala.binary-version }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
          restore-keys: |
            ${{ runner.os }}-ivy-scala-${{ matrix.scala.binary-version }}-
      - name: Test bash
        run: echo "hello world"
      - name: Build plugin
        run: sbt "; ++ ${{ matrix.scala.version }}; publishLocal"

  build-image:
    name: Build docker image to be used by runtime tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform: [ library ]

    steps:
      - uses: actions/checkout@v1
      - name: Load cached image
#        uses: actions/cache@v1
#        with:
#          path: ~/docker
#          key: docker-image-${{matrix.targetPlatform}}-${{ hashFiles('ci-docker/Dockerfile') }}-
#      - name: Load cached images
#        if: steps.load-cached-image.outputs.cache-hit == 'true'
#        run: |
#            ls $HOME/docker/*.tar.gz | \
#            xargs -I {file} sh -c "zcat {file} | docker load"; \
#            rm -rf $HOME/docker; \
#          fi
      - name: Run multiarch register
        run: "docker run
          --rm
          --privileged
          multiarch/qemu-user-static:register;"

      - name: Build image
        if: steps.load-cached-image.outputs.cache-hit != 'true'
        run: "docker build
          --cache-from scala-native-testing:linux-${{ matrix.targetPlatform }}
          -t scala-native-testing:linux-${{ matrix.targetPlatform }}
          --build-arg TARGET_DOCKER_PLATFORM=${{ matrix.targetPlatform }}
          --build-arg HOST_ARCHITECTURE=amd64
          --cpuset-cpus=0
          ci-docker"

  test-tools:
    name: Test tools
    runs-on: ubuntu-latest
    needs: build-plugin
    strategy:
      matrix:
        scalaVersion: [ 2.13.3 ] #, 2.12.2, 2.11.12 ]
    steps:
      - uses: actions/checkout@v2
      - run: sbt "++ ${{ matrix.scalaVersion }} -v" "-no-colors" "-J-Xmx3G" test-tools;

  test-runtime:
    name: Test runtime
    runs-on: ${{ matrix.os }}
    needs: [build-image, test-tools]
    strategy:
        matrix:
          scalaVersion: [2.13.3, 2.12.2, 2.11.12]
          os: [ubuntu-latest]
          targetPlatform: [library]
          buildMode: [debug, release-fast]
          gc: [boehm, immix, commix]
          exclude:
            - scalaVersion: 2.13.3
              buildMode: debug
              gc: boehm
            - scalaVersion: 2.12.12
              buildMode: debug
              gc: commix
            - scalaVersion: 2.11.12
              buildMode: debug
              gc: immix
    steps:
      - uses: actions/checkout@v1

      - name: Test main grid
        run: "docker run \
          -v $HOME/.ivy2:/home/scala-native/.ivy2 \
          -v $HOME/.sbt:/home/scala-native/.sbt \
          -v $PWD:/home/scala-native/scala-native \
          -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
          -e SCALANATIVE_GC=${{ matrix.gc }} \
          -e SCALA_VERSION=${{ matrix.scalaVersion }} \
          -e SCALANATIVE_OPTIMIZE=true \
          -e TEST_COMMAND=test-runtime \
          -it \
          scala-native-testing:linux-${{ matrix.targetPlatform }}"

  test-runtime-no-opt:
    name: Test not optimized runtime on Scala ${{ matrix.scalaVersion }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [ build-image, test-tools ]
    strategy:
      matrix:
        scalaVersion: [ 2.13.3, 2.12.2, 2.11.12 ]
        os: [ ubuntu-latest ]
        targetPlatform: [ library ]
        buildMode: [ debug, release-fast ]
        gc: [ immix ]
    steps:
      - uses: actions/checkout@v1

      - name: Test non optimized
        run: "docker run \
          -v $HOME/.ivy2:/home/scala-native/.ivy2 \
          -v $HOME/.sbt:/home/scala-native/.sbt \
          -v $PWD:/home/scala-native/scala-native \
          -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
          -e SCALANATIVE_GC=${{ matrix.gc }} \
          -e SCALA_VERSION=${{ matrix.scalaVersion }} \
          -e SCALANATIVE_OPTIMIZE=false \
          -e TEST_COMMAND=test-runtime \
          -it \
          scala-native-testing:linux-${{ matrix.targetPlatform }}"

  test-scripted:
    name: Test scripted on Scala ${{ matrix.scalaVersion }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [build-image, test-tools]
    strategy:
      matrix:
        scalaVersion: [ 2.13.3, 2.12.2, 2.11.12 ]
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v1
      - run: "docker run \
        -v $HOME/.ivy2:/home/scala-native/.ivy2 \
        -v $HOME/.sbt:/home/scala-native/.sbt \
        -v $PWD:/home/scala-native/scala-native \
        -e SCALANATIVE_MODE=${{ matrix.buildMode }} \
        -e SCALANATIVE_GC=immix \
        -e SCALA_VERSION=${{ matrix.scalaVersion }} \
        -e SCALANATIVE_OPTIMIZE=true \
        -e TEST_COMMAND=test-scripted \
        -it \
        scala-native-testing:linux-${{ matrix.targetPlatform }}"