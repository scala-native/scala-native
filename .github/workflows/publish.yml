name: Publish
on:
  push:
    tags:
    - 'v0.5.*'
  workflow_dispatch:
  schedule:
  # Snapshot release every day at midnight
  - cron: '0 0 * * *'

env:
  LAST_PUBLISHED_TAG: last-published

jobs:
  load_tag:
    name: Check last nightly tag
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    runs-on: ubuntu-22.04
    if: github.repository == 'scala-native/scala-native'
    steps:
      - uses: actions/checkout@v5

      - name: Check if there are changes since last run
        id: check
        run: |
          PREV_SHA=none
          if \
            [[ "${{ github.event_name }}" != "push" || "${{ github.ref_type }}" != "tag"  ]] \
            && git fetch origin tag ${LAST_PUBLISHED_TAG} 2> /dev/null
          then # if this is not a tag push (so, not a release) and the tag exists
            PREV_SHA=$(git rev-parse --verify --quiet refs/tags/${LAST_PUBLISHED_TAG} || true)
          fi

          echo "Previous SHA: $PREV_SHA"
          echo "Current  SHA: $GITHUB_SHA"

          if [ "$PREV_SHA" = "$GITHUB_SHA" ]; then
            echo "No changes since last run."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  check-compiles:
    name: Test compilation of all modules
    runs-on: ubuntu-22.04
    needs: [load_tag]
    if: needs.load_tag.outputs.skip == 'false' # repository check is done in load_tag
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: "2.13" #Unused, any version can be placed here
          java-version: 8

      - name: Compile everything
        run: sbt "-v" "-J-Xmx7G" "++3.1.3; Test/compile; ++2.13.14; Test/compile; ++2.12.19; Test/compile"

  publish:
    name: Publish for each Scala binary version
    runs-on: ubuntu-22.04
    needs: [check-compiles]
    strategy:
      fail-fast: false
      matrix:
        scala: ["2.12", "2.13", "3"]
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{ matrix.scala }} #Unused, any version can be placed here
          java-version: 8

      - name: Setup PGP Key
        run: |
          echo -n "$PGP_SECRET" | base64 --decode | gpg --batch --import
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}

      - name: Publish release
        env:
          SONATYPE_USER: "${{ secrets.SONATYPE_USER }}"
          SONATYPE_PASSWORD: "${{ secrets.SONATYPE_PASSWORD }}"
          PGP_PASSPHRASE: "${{ secrets.PGP_PASSWORD }}"
        run: sbt "-v" "-J-Xmx7G" "-J-XX:+UseG1GC" "publish-release-for-version ${{ matrix.scala }}"

  save_tag:
    name: Save SHA as last published tag
    runs-on: ubuntu-22.04
    needs: [publish]
    steps:
      - uses: actions/checkout@v5

      - name: Tag commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f ${LAST_PUBLISHED_TAG} $GITHUB_SHA
          git push origin -f ${LAST_PUBLISHED_TAG}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dispatch:
    name: Dispatch trigger builds for dependant projects
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        repo: ['scala-native/scala-native-cli']
    timeout-minutes: 5
    steps:
      - name: Dispatch to workflows of dependant projects
        run: |
            curl -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.DISPATCH_TOKEN }}" \
            --request POST \
            --data '{"event_type": "nightly-published", "client_payload": {} }' \
            https://api.github.com/repos/${{ matrix.repo }}/dispatches
