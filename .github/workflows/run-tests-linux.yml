name: Run tests Linux
on:
  workflow_call:
  pull_request:
  push:
    branches:
      - main
      - 0.4.x
  schedule:
    # Every day at 2 AM UTC
    - cron: "0 2 * * *"
concurrency:
  group: linux-${{ github.head_ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # Compile all sources for given Scala version
  # Cache external dependencies
  # Test tools, if any of them fails, further tests will not start.
  tests-tools:
    name: Compile & test tools
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10, 2.12.17]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
          java-version: 8

      - name: Test tools
        run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" "test-tools ${{ matrix.scala }}"

        # Make sure that Scala partest blacklisted tests contain only valid test names
      - name: Setup Scala-cli
        uses: VirtusLab/scala-cli-setup@v0.1

      - name: Check partest disabled tests list
        # No partests support for Scala 3
        if: ${{ !startsWith(matrix.scala, '3.') }}
        run: |
          sbt "++ ${{ matrix.scala }} -v" \
          "-no-colors" \
          "scalaPartest${{env.project-version}}/fetchScalaSource"
          scala-cli scripts/partest-check-files.scala -- ${{ matrix.scala }}

        # scala-cli-setup can override default java version
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
          java-version: 8

        # Running all partests would take ~2h for each Scala version, run only single test of each kind
        # to make sure that infrastructure works correctly.
      - name: Run subset of partest tests
        # No partests support for Scala 3
        if: ${{ !startsWith(matrix.scala, '3.') }}
        run: |
          sbt "++ ${{ matrix.scala }} -v" \
          "-no-colors" \
          "-J-Xmx3G" \
          "scalaPartestTests${{env.project-version}}/testOnly -- --showDiff neg/abstract.scala pos/abstract.scala run/Course-2002-01.scala"

  test-compiler-plugins:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10, 2.12.17]
    if: "(github.event_name == 'schedule' || github.event_name == 'workflow_call')  && github.repository == 'scala-native/scala-native'"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
          java-version: 8

      - name: Test cross compilation of compiler plugins
        run: sbt "+nscplugin${{env.project-version}}/compile; +junitPlugin${{env.project-version}}/compile" "-J-Xmx3G"

  test-runtime:
    name: Test runtime
    runs-on: ubuntu-22.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2]
        gc: [none, boehm, immix, commix]
        include:
          - scala: 2.13.10
            gc: immix
          - scala: 2.12.17
            gc: immix
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
      - name: Run tests
        env:
          SCALANATIVE_GC: ${{ matrix.gc }}
        run: sbt "test-runtime ${{ matrix.scala }}"

  test-runtime-ext:
    name: Test runtime extension
    runs-on: ubuntu-20.04
    needs: [tests-tools, test-runtime]
    if: "(github.event_name == 'schedule' || github.event_name == 'workflow_call')  && github.repository == 'scala-native/scala-native'"
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10]
        build-mode: [debug, release-fast]
        lto: [none, thin]
        gc: [boehm, immix, commix]
        exclude:
          # Covered in basic test-runtime
          - scala: 3.2.2
            build-mode: debug
          - scala: 2.13.10
            build-mode: debug
            gc: immix
        include:
          - scala: 3.2.2
            build-mode: release-size
            lto: thin
            gc: immix
          - scala: 3.2.2
            build-mode: release-full
            lto: thin
            gc: commix
          - scala: 2.13.10
            build-mode: release-full
            lto: full
            gc: commix
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALANATIVE_LTO: ${{ matrix.lto }}
          SCALANATIVE_OPTIMIZE: true
        run: sbt "test-runtime ${{ matrix.scala }}"

  # This job is basically copy-paste of test-runtime.
  # Main difference is disabled optimization and fixed Immix GC
  test-runtime-no-opt:
    name: Test runtime no-opt
    runs-on: ubuntu-20.04
    needs: tests-tools
    if: "(github.event_name == 'schedule' || github.event_name == 'workflow_call')  && github.repository == 'scala-native/scala-native'"
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2, 2.13.10]
        build-mode: [debug]
        include:
          - scala: 2.13.10
            build-mode: release-fast
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: false
        run: sbt "test-runtime ${{ matrix.scala }}"

  # This job is basically copy-paste of test-runtime.
  # Scripted tests take a long time to run, ~30 minutes, and should be limited and absolute minimum.
  test-scripted:
    name: Test scripted
    runs-on: ubuntu-20.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [2.12.17, 3.1.3]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: true
        run: |
          export LLVM_BIN=$(dirname $(readlink -f /usr/bin/clang))
          sbt "test-scripted ${{matrix.scala}}"

  test-llvm-versions:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2]
        llvm: [13, 14, 15, 16, 17] # Last 3 stable versions + available future versions
    if: "(github.event_name == 'schedule' || github.event_name == 'workflow_call')  && github.repository == 'scala-native/scala-native'"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
          llvm-version: ${{ matrix.llvm }}
          java-version: 8

      - name: Run tests
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_LTO: thin
          LLVM_BIN: "/usr/lib/llvm-${{ matrix.llvm }}/bin"
        run: sbt "test-runtime ${{ matrix.scala }}"

  test-multihreading:
    name: Test experimental multithreading support
    runs-on: ubuntu-20.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [3.2.2]
        build-mode: [debug, release-fast]
        gc: [boehm, immix]
        lto: [none, thin]
        exclude:
          # Takes too much time to build
          - build-mode: release-fast
            lto: none
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Prepare native config command
        shell: bash
        run: |
          buildMode=${{matrix.build-mode}}
          if [[ "$buildMode" == "release-fast" ]]; then 
            buildMode=releaseFast
          fi

          SetConfigTemplate=$(cat << EOM
            nativeConfig ~= { prev =>
              prev
                .withMode(scalanative.build.Mode.${buildMode})
                .withGC(scalanative.build.GC.${{matrix.gc}})
                .withLTO(scalanative.build.LTO.${{matrix.lto}})
                .withEmbedResources(true)
                .withCheck(true)
                .withCheckFatalWarnings(true)
                .withMultithreadingSupport(true)
            }
          EOM
          )

          echo set-native-config=${SetConfigTemplate} >> $GITHUB_ENV

      - name: Run tests
        # 2x more then it should take to build and run tests
        timeout-minutes: 60
        env:
          TEST_COMMAND: >
            ++${{matrix.scala}} -v;
            set sandbox.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set tests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set junitTestOutputsNative.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set scalaPartestJunitTests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};

            show sandbox${{env.project-version}}/nativeConfig;

            sandbox${{env.project-version}}/run;
            testsJVM${{env.project-version}}/test;
            tests${{env.project-version}}/test;
            junitTestOutputsJVM${{env.project-version}}/test;
            junitTestOutputsNative${{env.project-version}}/test;
            scalaPartestJunitTests${{env.project-version}}/test
        run: sbt -J-Xmx5G "${TEST_COMMAND}"
