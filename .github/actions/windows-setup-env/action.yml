name: "Windows test env setup"
description: "Used to setup Windows tests environemt"
inputs:
  scala-version:
    description: "Scala version used in the tests"
    required: true
  java-version:
    description: "Java version to use in tests"
    default: "8"
  llvm-version:
    description: "LLVM version to use"
    default: "17.0.6"
outputs:
  vcpkg-dir:
    description: "Directory containing installed libraries"
    value: ${{steps.resolve-env.outputs.VcpkgLibs}}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-java@v3
      with:
        distribution: "zulu"
        java-version: ${{inputs.java-version}}
    # We need to set proper Pagefile limits in advance.
    # Github actions default page file size is quite small,
    # it's not enough to run all tests, especially when using None GC.
    # We've observed that on Unix memory management is less strict,
    # you can reserve more memory than it's physically possible.
    # On Windows however you need to reserve/commit memory in advance -
    # it does not matter whether it would be used or not, the amount of all
    # reserved memory cannot exceed the amount of physically available storage.
    - name: Configure Pagefile
      uses: al-cheb/configure-pagefile-action@v1.3
      with:
        minimum-size: 4GB
        maximum-size: 16GB

    #Prepare environment, clang needs to be installed
    #Compilation on MSVC needs c++14 or higher and expects llvm 11.0.0 or newer
    #Cache commonly used files: Coursier, ivy cache
    - name: Resolve env variables
      id: resolve-env
      shell: pwsh
      run: |
        "ProgramFiles=${env:ProgramFiles}" >> $env:GITHUB_OUTPUT
        "LocalAppData=${env:LocalAppData}" >> $env:GITHUB_OUTPUT
        "UserProfile=${env:UserProfile}" >> $env:GITHUB_OUTPUT
        "VcpkgLibs=${env:VCPKG_INSTALLATION_ROOT}\installed\x64-windows-static" >> $env:GITHUB_OUTPUT
        if ("${{inputs.scala-version}}".StartsWith("2.")) {
          echo ("project-version=" + ("${{inputs.scala-version}}".Split(".")[0, 1] -join "_")) >> $env:GITHUB_ENV
        } elseif ("${{inputs.scala-version}}".StartsWith("3-next")) {
          echo ("project-version=3_next") >> $env:GITHUB_ENV
        } else {
          echo "project-version=3" >> $env:GITHUB_ENV
        }

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          ${{steps.resolve-env.outputs.ProgramFiles}}\LLVM\
          ${{steps.resolve-env.outputs.LocalAppData}}\Coursier\Cache\v1\
          ${{steps.resolve-env.outputs.UserProfile}}\.ivy2\cache
        key: ${{ runner.os }}-${{ inputs.scala-version }}-deps

    # Install LLVM in case if cache is missing
    - name: Install LLVM
      shell: pwsh
      run: |
        $retryCount = 3
        $retryDelay = 5  # seconds

        function InstallLLVM {
            Write-Host "Attempting to install LLVM (try $($retryCount + 1 - $global:retryAttempt) of $($retryCount + 1))..."
            choco install llvm --version=${{ inputs.llvm-version }} --allow-downgrade --force
        }

        # Attempt to install LLVM with retries
        for ($global:retryAttempt = 1; $global:retryAttempt -le $retryCount; $global:retryAttempt++) {
            try {
                InstallLLVM
                Write-Host "LLVM installation successful!"
                break  # Exit the loop if installation is successful
            } catch {
                Write-Host "Error installing LLVM: $_"
                if ($global:retryAttempt -lt $retryCount) {
                    Write-Host "Retrying in $retryDelay seconds..."
                    Start-Sleep -Seconds $retryDelay
                } else {
                    Write-Host "Maximum retry attempts reached. Exiting."
                    exit 1
                }
            }
        }

    - name: Add LLVM on Path
      shell: pwsh
      run: echo "${env:ProgramFiles}\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Assert clang installed and on path
      shell: pwsh
      run: clang --version

    - name: Install libs
      shell: pwsh
      run: vcpkg install bdwgc zlib --triplet=x64-windows-static
